{"mappings":"uBAI2CA,mBCJAA,MACrCC,MAAMC,QAAQF,GAAG,SACVG,EAAI,EAAGC,EAAI,IAAOH,MAAMD,EAAIK,QAASF,EAAIH,EAAIK,OAAQF,IAC5DC,EAAKD,GAAKH,EAAIG,UAGTC,GDDFE,CAAkBN,aELcO,MACnCC,OAAOC,YAAYC,OAAOH,IAA4C,uBAAnCG,OAAOC,UAAUC,SAASC,KAAKN,GAA8B,OAASN,MAAMa,KAAKP,GFIvFQ,CAAgBf,yBGJvCgB,UAAS,mDHIsCC,OIycnDC,aA5ciBC,OAKnBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIEC,EAAG,SAAGC,UACVA,EAAMA,EAAMxB,OAAS,IAGjByB,EAAU,SAAIC,EAAIC,UACtBD,EAAGE,OAASD,EAAGC,MAAQF,EAAGG,WAAaF,EAAGE,UAAYH,EAAGI,YAAcH,EAAGG,WAGtEC,EAAS,SAAIC,EAAIC,MACjBD,EAAGhC,SAAWiC,EAAGjC,OAAM,OAClB,UAELkC,EAAC,GACIC,EAAQ,EAAGA,EAAQH,EAAGhC,SAAUmC,UAC9BC,EAAI,EAAGA,EAAIJ,EAAGhC,SAAUoC,GAC1BF,EAAEG,SAASD,IAAMX,EAAWO,EAAGG,GAAQF,EAAGG,KAC7CF,EAAEI,KAAKF,UAINF,EAAElC,SAAWgC,EAAGhC,QAGnBuC,EAAY,SAAIC,EAAIC,MACpBD,EAAGE,OAASD,EAAGC,KAAI,OACd,SAEDF,EAAGE,0BAEA,qBAEAF,EAAGL,QAAUM,EAAGN,0BAEhBK,EAAGZ,OAASa,EAAGb,2BAEf,IAQPe,EAAU,SAAGC,UACjBA,GAAU5B,GAA0B4B,EAAS7B,EAASf,OAAS,GAO3D6C,EAAK,SAAGD,MAJa,SAAGA,UAC5BA,GAAU5B,GAA0B4B,EAAS7B,EAASf,OAIlD8C,CAAsBF,GAAM,MAAA,CACtBA,WAENG,EAAC,GACIjD,EAAI,EAAGA,EAAIoB,EAAOlB,SAAUF,EAAC,GAChCoB,EAAOpB,GAAGkD,MAAQJ,GAAU1B,EAAOpB,GAAGmD,IAAI,KAAOL,UAC/CM,EAAKL,EAAM3B,EAAOpB,GAAGmD,IAAI,IACpBb,EAAI,EAAGA,EAAIc,EAAGlD,SAAUoC,EAC/BW,EAAET,KAAKY,EAAGd,WAITW,GAGHI,EAAO,SAAGC,WACVC,EAAaD,EAAIE,MAAM,GACvBC,GAAe,EACZA,GAAY,CACjBA,GAAe,UACNzD,EAAI,EAAGA,EAAIuD,EAAWrD,SAAUF,UACnC8C,EAASS,EAAWvD,GAAG8B,KAAKqB,IAAII,EAAWvD,GAAG+B,UACzCO,EAAI,EAAGA,EAAIlB,EAAOlB,SAAUoC,EAAC,GAChClB,EAAOkB,GAAGY,MAAQJ,UAChBG,EAAIF,EACNQ,EAAWvD,GAAG+B,SAAW,EAAIwB,EAAWvD,GAAG8B,KAAKqB,IAAIjD,OACpDqD,EAAWvD,GAAG8B,KAAKqB,IAAII,EAAWvD,GAAG+B,SAAW,GAChDwB,EAAWvD,GAAGgC,WACP0B,EAAI,EAAGA,EAAIT,EAAE/C,SAAUwD,EAAC,SAC3BC,EAAI,CACN7B,KAAMV,EAAOkB,GACbP,SAAU,EACVC,UAAWiB,EAAES,IAEXE,GAAU,EACLC,EAAI,EAAGA,EAAIN,EAAWrD,SAAU2D,EAAC,GACpClC,EAAW4B,EAAWM,GAAIF,GAAI,CAChCC,GAAU,QAIVA,IACFL,EAAWf,KAAKmB,GAChBF,GAAe,WAOpBF,GAGHO,EAAI,SAAIR,EAAKR,WACbiB,EAAO,GACF/D,EAAI,EAAGA,EAAIsD,EAAIpD,SAAUF,EAC5BsD,EAAItD,GAAG8B,KAAKqB,IAAIG,EAAItD,GAAG+B,YAAce,GACvCiB,EAAQvB,KAAI,CACVV,KAAMwB,EAAItD,GAAG8B,KACbC,SAAUuB,EAAItD,GAAG+B,SAAW,EAC5BC,UAAWsB,EAAItD,GAAGgC,mBAIjBqB,EAAQU,IAiBXC,EAAkB,SAAIC,EAAMnC,MAC5BmC,EAAKnB,SAAWhB,EAAKoB,KAAgC,IAAzBe,EAAKC,SAAShE,OAAY,SAC/CF,EAAI,EAAGA,EAAI8B,EAAKqB,IAAIjD,SAAUF,EACrCiE,EAAKC,SAAS1B,KAAI,CAChBM,OAAQhB,EAAKqB,IAAInD,GACjBkE,SAAQ,YAGL,MAEAlE,EAAIiE,EAAKC,SAAShE,OAAS,EAAGF,GAAK,IAAKA,KAC3CgE,EAAmBC,EAAKC,SAASlE,GAAI8B,GAAI,OACpC,SAGJ,GAmDHqC,EAAqB,SAAI9B,EAAOS,EAAQsB,WACTC,IAA/B/C,EAAYe,GAAOS,GACrBxB,EAAYe,GAAOS,GAAUsB,UACW,aAA/B9C,EAAYe,GAAOS,GAAQF,KAAmB,SACnD0B,GAAY,EACPtE,EAAI,EAAGA,EAAIsB,EAAYe,GAAOS,GAAQyB,QAAQrE,SAAUF,EAAC,GAC5DyC,EAAanB,EAAYe,GAAOS,GAAQyB,QAAQvE,GAAIoE,GAAM,CAC5DE,GAAY,QAIZA,GACFhD,EAAYe,GAAOS,GAAQyB,QAAQ/B,KAAK4B,QAEhC3B,EAAanB,EAAYe,GAAOS,GAASsB,KACnD9C,EAAYe,GAAOS,GAAM,CACvBF,KAAI,WACJ2B,QAAO,CAAGjD,EAAYe,GAAOS,GAASsB,IAExC7C,GAAyB,SA8CxBiD,aAAY,SAAGC,GAClBxD,EAAQ,WACJyD,EAAQD,EAAWE,OAAOC,MAAK,WAC/BC,EAAY,GACP7E,EAAI,EAAGA,EAAI0E,EAAMxE,SAAUF,EAClC6E,EAAa7E,GAAK0E,EAAM1E,GAAG2E,OAAOC,MAAK,OAClC3D,EAASsB,SAASsC,EAAa7E,GAAG,KACrCiB,EAASuB,KAAKqC,EAAa7E,GAAG,IAGlCkB,EAAyBD,EAASf,eACzB0B,EAAI,EAAGA,EAAIiD,EAAa3E,SAAU0B,UAChCU,EAAI,EAAGA,EAAIuC,EAAajD,GAAG1B,SAAUoC,EACvCrB,EAASsB,SAASsC,EAAajD,GAAGU,KACrCrB,EAASuB,KAAKqC,EAAajD,GAAGU,IAIpCnB,EAAaF,EAASf,OACtBe,EAASuB,KAAI,KACbpB,EAAM,WACGS,EAAI,EAAGA,EAAIgD,EAAa3E,SAAU2B,EAAC,CAC1CT,EAAOS,GAAC,CACNiD,MAAOjD,EACPsB,IAAG,QAEIb,EAAI,EAAGA,EAAIuC,EAAahD,GAAG3B,SAAUoC,EAClC,IAANA,EACFlB,EAAOS,GAAGqB,IAAMjC,EAAS8D,QAAQF,EAAahD,GAAGS,IAEjDlB,EAAOS,GAAGsB,IAAIX,KAAKvB,EAAS8D,QAAQF,EAAahD,GAAGS,MA/HtC,WACpBjB,EAAW,CACTgC,EAAO,EACLvB,KAAMV,EAAO,GACbW,SAAU,EACVC,UAAWb,cAGX6D,GAAc,EACXA,GAAW,CAChBA,GAAc,UACLhF,EAAI,EAAGA,EAAIqB,EAAYnB,SAAUF,EAAC,IAAA,IAChC8C,EAAS,EAAGA,EAAS7B,EAASf,OAAS,IAAK4C,EAAM,KACrDQ,EAAMQ,EAAKzC,EAAYrB,GAAI8C,MACZ,IAAfQ,EAAIpD,OAAY,SACd+E,GAAS,EACJ3C,EAAI,EAAGA,EAAIjB,EAAYnB,SAAUoC,EAAC,GACrCL,EAAUZ,EAAYiB,GAAIgB,GAAG,CAC/B2B,GAAS,QAITA,IACF5D,EAAYmB,KAAKc,GACjB0B,GAAc,MA2GxBE,GA5EoB,WACpB5D,EAAW,IAAOxB,MAAMuB,EAAYnB,QACpCqB,GAAyB,UAChBvB,EAAI,EAAGA,EAAIqB,EAAYnB,SAAUF,EAAC,CACzCsB,EAAYtB,GAAC,IAAQF,MAAMmB,EAASf,gBAC3BoC,EAAI,EAAGA,EAAIjB,EAAYrB,GAAGE,SAAUoC,EAAC,KACxCQ,EAASzB,EAAYrB,GAAGsC,GAAGR,KAAKqB,IAAI9B,EAAYrB,GAAGsC,GAAGP,aACtDc,EAAWC,WACTiB,EAAUD,EAAKzC,EAAYrB,GAAI8C,GAC1BY,EAAI,EAAGA,EAAIrC,EAAYnB,SAAUwD,EACpCzB,EAAUZ,EAAYqC,GAAIK,IAC5BI,EAAsBnE,EAAG8C,EAAM,CAC7BF,KAAI,QACJP,MAAOqB,IAKXrC,EAAYrB,GAAGsC,GAAGP,WAAaV,EAAYrB,GAAGsC,GAAGR,KAAKqB,IAAIjD,SA5P/C,IA6PTmB,EAAYrB,GAAGsC,GAAGR,KAAKoB,IACzBiB,EAAsBnE,EAAGqB,EAAYrB,GAAGsC,GAAGN,UAAS,CAClDY,KAAI,SACJd,KAAMT,EAAYrB,GAAGsC,GAAGR,OAEjBT,EAAYrB,GAAGsC,GAAGN,YAAcb,IACzCG,EAAYtB,GAAGmB,GAAU,CAAMyB,KAAI,gBAIhCE,EAAS,EAAGA,EAAS5B,IAA0B4B,MAClDiB,EAAUD,EAAKzC,EAAYrB,GAAI8C,GAC1BY,EAAI,EAAGA,EAAIrC,EAAYnB,SAAUwD,EACpCzB,EAAUZ,EAAYqC,GAAIK,KAC5BzC,EAAYtB,GAAG8C,GAAUY,IA4CjCyB,SAGGC,MAAK,SAAGC,WACShB,IAAhB/C,KAGJE,EAAW,GACPD,EACFC,EAAYgB,KAAI,CACd8C,WAAU,GACVC,YAAW,GACXC,MAAK,GACLpB,OAAM,CACJxB,KAAI,QACJ6C,MAAK,sCAKPD,EAxMI,SAAGA,WACPE,EAAIF,EAAMb,OAAOC,MAAK,OACtBe,EAAC,GACI3F,EAAI,EAAGA,EAAI0F,EAAExF,SAAUF,EAAC,KAC3B4F,EAAI3E,EAAS8D,QAAQW,EAAE1F,QACtB6C,EAAW+C,GAAC,OACR,EAETD,EAAEnD,KAAKoD,UAETD,EAAEnD,KAAKrB,GACAwE,EA6LKE,CAAKR,OACH,IAAVG,UAYAF,EAAU,CAAI,GACdC,EAAW,KACJ,KACLnB,EAAS9C,EAAYG,EAAI6D,IAAaE,EAAM,gBACjCnB,IAAXD,IACFA,EAAM,CACJxB,KAAI,QACJ6C,MAAK,gBAITjE,EAAYgB,KAAI,CACd8C,WAAYA,EAAW9B,MAAM,GAC7B+B,YAAaA,EAAY/B,MAAM,GAC/BgC,MAAOA,EAAMhC,MAAM,GACnBY,OAAQA,IAEFA,EAAOxB,kBAEX2C,EAAY/C,KAAKgD,EAAMM,SACvBR,EAAW9C,KAAK4B,EAAO/B,kCAGdrC,EAAI,EAAGA,EAAIoE,EAAOtC,KAAKqB,IAAIjD,SAAUF,EAC5CuF,EAAYQ,MACZT,EAAWS,MAEbR,EAAY/C,KAAK4B,EAAOtC,KAAKoB,KAC7BoC,EAAW9C,KAAKlB,EAAYG,EAAI6D,IAAalB,EAAOtC,KAAKoB,kDAvC7D1B,EAAYgB,KAAI,CACd8C,WAAU,GACVC,YAAW,GACXC,MAAK,GACLpB,OAAM,CACJxB,KAAI,QACJ6C,MAAK,yBA0CRO,MAAK,WACR/E,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,OACA6C,OAKI4B,EAAS,SAAG7B,UACRA,EAAOxB,qDAIEwB,EAAO/B,6BAEP+B,EAAOtC,KAAKgD,kCAENV,EAAOqB,6BAEtBS,EAAMD,EAAU7B,EAAOG,QAAQ,IAC1BlC,EAAQ,EAAGA,EAAQ+B,EAAOG,QAAQrE,SAAUmC,EACnD6D,GAAG,IAAUD,EAAU7B,EAAOG,QAAQlC,WAEjC6D,IAIPC,EAAW,SAAGrD,UA9ZC,IA+ZfA,EAAuB,eAGvBA,IAAW3B,EAAU,aA/WR,SAAG2B,UACpBA,EAAS5B,GAA0B4B,EAAS,EAiXxCsD,CAActD,GAAM,eAGpBD,EAAWC,GAAM,mBAKjBuD,EAAS,kBACbrF,EAASsF,eAAc,QAGnBC,EAAU,kBACdvF,EAASsF,eAAc,MAGnBE,EAAO,SAAIC,EAAKC,EAASC,EAASC,OAClCC,EAAO7F,EAAS8F,cAAcL,eAElBpC,IAAZqC,EACU,GACH5G,MAAMC,QAAQ2G,GACRA,EAEH,CAAIA,IAELK,SAAO,SAACC,GACG,iBAAXA,EACTH,EAAKI,YAAYD,GAEjBH,EAAKI,YAAYjG,EAASsF,eAAeU,YAG7B3C,IAAZsC,IACE7G,MAAMC,QAAQ4G,IAChB5F,EAAA8F,EAAKK,WAAUC,IAAfC,MAAArG,EAAcsG,EAAQV,IAEtBE,EAAKK,UAAUC,IAAIR,SAGTtC,IAAVuC,GACFrG,OAAO+G,KAAKV,GAAOG,SAAO,SAACQ,GACzBV,EAAKU,GAAOX,EAAMW,MAGfV,GAGHW,EAAU,SAAI1E,EAAQ2E,OACtBd,EAAO,CAAIR,EAAYrD,gBACHuB,IAApBoD,GACFd,EAAQnE,KAAKiF,GAERjB,EAAO,IAAMvF,EAAS6B,GAAS6D,IAGlCe,EAAY,SAAGC,UACnBA,EAAQC,KAAG,SAAC9E,UACV0E,EAAW1E,OAIT+E,EAAS,SAAG/F,UAChB0F,EAAW1F,EAAKoB,KAChBmD,KAFwByB,OAIzBT,EADIK,EAAa5F,EAAKqB,QAsBjB4E,EAAQ,SAAG9D,WACFI,IAATJ,OAGA+D,EAAShH,EAAS8F,cAAa,MAC/BmB,EAASjH,EAAS8F,cAAa,MACnCmB,EAAOf,UAAUC,IAAIhB,EAAYlC,EAAKnB,SACtCkF,EAAOf,YAAYgB,OACfC,EAAWlH,EAAS8F,cAAa,eACrCoB,EAASjB,YAAYjG,EAASsF,eAAerF,EAASgD,EAAKnB,UAC3DmF,EAAOhB,YAAYiB,GACnBjE,EAAKC,SAAS6C,SAAO,SAACoB,OAChBtB,EAAOkB,EAASI,QACP9D,IAATwC,GACFmB,EAAOf,YAAYJ,MAGhBmB,SAKJI,cAAa,SAAGC,MACnBA,EAAUC,UAAS,QACFjE,IAAbpD,OAGAsH,EAAUvH,EAAS8F,cAAa,OACpC1F,EAAO2F,SAAO,SAAEjF,EAAM9B,GACpBuI,EAAQtB,YAAYT,EAAO,IAAMxG,EAAC,MAClC6H,EAAU/F,GAAMiF,SAAO,SAACyB,GACtBD,EAAQtB,YAAYuB,MAElBxI,IAAMoB,EAAOlB,OAAS,GACxBqI,EAAQtB,YAAYjG,EAAS8F,cAAa,UAG9CuB,EAAUpB,YAAYsB,UAGnBE,iBAAgB,SAAGJ,MACtBA,EAAUC,UAAS,QACCjE,IAAhBhD,OAGAkH,EAAUvH,EAAS8F,cAAa,OACpCzF,EAAY0F,SAAO,SAAEzD,EAAKoF,GACxBpF,EAAIyD,SAAO,SAAEpD,EAAMgF,GACjBJ,EAAQtB,YAAYT,EAAO,IACX,IAAdmC,EAAe,KACTnC,EAAO,MAAQkC,aACrBrE,IAtEO,SAAGV,OACZiF,EAAK,CACPpB,EAAW7D,EAAK7B,KAAKoB,KACrBmD,YAEF1C,EAAK7B,KAAKqB,IAAI4D,SAAO,SAAE8B,EAAW7I,GAC5B2D,EAAK5B,WAAa/B,GACpB4I,EAAMpG,KAAK+D,KAEbqC,EAAMpG,KAAKgF,EAAWqB,OAEpBlF,EAAK5B,WAAa4B,EAAK7B,KAAKqB,IAAIjD,QAClC0I,EAAMpG,KAAK+D,KAEbqC,EAAMpG,KAAKxB,EAASsF,eAAc,MAClCsC,EAAMpG,KAAKgF,EAAW7D,EAAK3B,UAAS,cAC7B4G,EAwDHE,CAAUnF,GAAMoD,SAAO,SAACgC,GACtBR,EAAQtB,YAAY8B,MAElBJ,IAAcrF,EAAIpD,OAAS,GAC7BqI,EAAQtB,YAAYjG,EAAS8F,cAAa,UAG1C4B,IAAarH,EAAYnB,OAAS,IACpCqI,EAAQtB,YAAYjG,EAAS8F,cAAa,OAC1CyB,EAAQtB,YAAYjG,EAAS8F,cAAa,WAG9CuB,EAAUpB,YAAYsB,UAGnBS,iBAAgB,SAAGX,MACtBA,EAAUC,UAAS,QACCjE,IAAhB/C,OAGA2H,EAAYjI,EAAS8F,cAAa,SAClCoC,EAAYlI,EAAS8F,cAAa,SACtCmC,EAAUhC,YAAYiC,OAClBC,EAAenI,EAAS8F,cAAa,MACzCoC,EAAUjC,YAAYkC,OAClBC,EAAepI,EAAS8F,cAAa,MACzCoC,EAAUjC,YAAYmC,OAClBC,EAAYrI,EAAS8F,cAAa,SACtCmC,EAAUhC,YAAYoC,GACtBF,EAAalC,YAAYT,EAAO,KAAK,aAAWnC,EAAS,CAAIiF,QAAS,KACtEH,EAAalC,YAAYT,EAAO,KAAK,cAAYnC,EAAS,CAAIkF,QAAStI,EAASf,OAASgB,KACzFiI,EAAalC,YAAYT,EAAO,KAAK,YAAUnC,EAAS,CAAIkF,QAASrI,EAAyB,aACrFwE,EAAIxE,EAAwBwE,EAAIzE,EAASf,SAAUwF,EAAC,KACvDiB,EAAO,WACPjB,IAAMvE,GACRwF,EAAQnE,KAAI,cAEd4G,EAAanC,YAAYT,EAAO,KAAOvF,EAASyE,GAAIiB,YAE7CzE,EAAI,EAAGA,EAAIhB,IAA0BgB,EAC5CkH,EAAanC,YAAYT,EAAO,KAAOvF,EAASiB,GAAC,iBAE1ClC,EAAI,EAAGA,EAAIsB,EAAYpB,SAAUF,EAAC,KACrCwJ,EAASxI,EAAS8F,cAAa,MACnCuC,EAAUpC,YAAYuC,GACtBA,EAAOvC,YAAYT,EAAO,KAAOxG,YACxBmC,EAAIjB,EAAwBiB,EAAIlB,EAASf,SAAUiC,OAChCkC,IAAtB/C,EAAYtB,GAAGmC,GACjBqH,EAAOvC,YAAYT,EAAO,UAAOnC,EAAS,UAE1CmF,EAAOvC,YAAYT,EAAO,KAAOP,EAAU3E,EAAYtB,GAAGmC,IAAKb,EAAYtB,GAAGmC,GAAGS,eAG5E6G,EAAI,EAAGA,EAAIvI,IAA0BuI,EAC5CD,EAAOvC,YAAYT,EAAO,KAAOlF,EAAYtB,GAAGyJ,KAGpDpB,EAAUpB,YAAYgC,UAGnBS,iBAAgB,SAAGrB,MACtBA,EAAUC,UAAS,QACCjE,IAAhB7C,OAGAyH,EAAYjI,EAAS8F,cAAa,SAClCoC,EAAYlI,EAAS8F,cAAa,SACtCmC,EAAUhC,YAAYiC,OAClBS,EAAc3I,EAAS8F,cAAa,MACxCoC,EAAUjC,YAAY0C,OAClBN,EAAYrI,EAAS8F,cAAa,SACtCmC,EAAUhC,YAAYoC,GACtBM,EAAY1C,YAAYT,EAAO,KAAK,gBACpCmD,EAAY1C,YAAYT,EAAO,KAAK,iBACpCmD,EAAY1C,YAAYT,EAAO,KAAK,UACpCmD,EAAY1C,YAAYT,EAAO,KAAK,WACpCmD,EAAY1C,YAAYT,EAAO,KAAK,WACpChF,EAAYuF,SAAO,SAAC6C,OACdJ,EAASxI,EAAS8F,cAAa,MACnCuC,EAAUpC,YAAYuC,GACtBA,EAAOvC,YAAYT,EAAO,KAAOxF,EAASsF,eAAesD,EAAKtE,WAAWuE,KAAI,QAC7EL,EAAOvC,YAAYT,EAAO,KAAOkB,EAAakC,EAAKrE,eACnDiE,EAAOvC,YAAYT,EAAO,KAAOkB,EAAakC,EAAKpE,SACnDgE,EAAOvC,YAAYT,EAAO,KAAOP,EAAU2D,EAAKxF,QAASwF,EAAKxF,OAAOxB,OACrE4G,EAAOvC,YAAYT,EAAO,KACR,WAAhBoD,EAAKxF,OAAOxB,KACZiF,EAAU+B,EAAKxF,OAAOtC,WACtBuC,OAGJgE,EAAUpB,YAAYgC,UAGnBa,gBAAe,SAAGzB,MACrBA,EAAUC,UAAS,QACCjE,IAAhB7C,OAGAwG,EAASD,EAhfG,mBACZ9D,EACKjE,EAAIwB,EAAYtB,OAAS,EAAGF,GAAK,IAAKA,EACf,WAA1BwB,EAAYxB,GAAGoE,OAAOxB,YACXyB,IAATJ,IACFA,EAAI,CACFnB,OAAQtB,EAAYxB,GAAGoE,OAAOtC,KAAKoB,IACnCgB,SAAQ,KAGZF,EAAmBC,EAAMzC,EAAYxB,GAAGoE,OAAOtC,cAG5CmC,EAmee8F,SACP1F,IAAX2D,GACFK,EAAUpB,YAAYe,UAMrBgC,cAAa,2EAUbC,YAAW,sCCrqBlBjJ,SAASkJ,iBAAgB,oBAAmB,eAEpCC,EAAY,IAAOC,EAAapJ,UAEhCqJ,EAAcrJ,SAASsJ,eAAc,gBACrCC,EAAYvJ,SAASsJ,eAAc,cACnCE,EAAU,CACdC,QAASzJ,SAASsJ,eAAc,qBAChCI,WAAY1J,SAASsJ,eAAc,wBACnCK,WAAY3J,SAASsJ,eAAc,yBACnCM,WAAY5J,SAASsJ,eAAc,yBACnCO,UAAW7J,SAASsJ,eAAc,yBAG9BQ,EAAe,WACnBvK,OAAO+G,KAAKkD,GAAYzD,SAAO,SAACQ,GAC9BiD,EAAWjD,GAAKe,UAAS,OAIvB9D,EAAY,WAChBsG,IACAX,EAAa3F,aAAa6F,EAAYU,OACtCZ,EAAa/B,cAAcoC,EAAWC,SACtCN,EAAa1B,iBAAiB+B,EAAWE,YACzCP,EAAanB,iBAAiBwB,EAAWG,aAGrCvF,EAAK,WACT+E,EAAa/E,MAAMmF,EAAUQ,OAC7BZ,EAAaT,iBAAiBc,EAAWI,YACzCT,EAAaL,gBAAgBU,EAAWK,YAiB1C7J,SAASsJ,eAAc,iBAAkBJ,iBAAgB,QAAU1F,GACnExD,SAASsJ,eAAc,SAAUJ,iBAAgB,QAAU9E,GAC3DpE,SAASsJ,eAAc,gBAAiBJ,iBAAgB,SAhBvC,WACfG,EAAYU,MAAQZ,EAAaH,gBACjCxF,IACA+F,EAAUQ,MAAQZ,EAAaF,cAC/B7E,OAaFpE,SAASsJ,eAAc,SAAUJ,iBAAgB,SAVtC,WACTG,EAAYU,MAAK,GACjBR,EAAUQ,MAAK,GACfD,IACAX,EAAanE","sources":["node_modules/@swc/helpers/src/_to_consumable_array.js","node_modules/@swc/helpers/src/_array_without_holes.js","node_modules/@swc/helpers/src/_iterable_to_array.js","node_modules/@swc/helpers/src/_non_iterable_spread.js","src/scripts/Lr1ParserVis.js","src/scripts/index.js"],"sourcesContent":["import arrayWithoutHoles from './_array_without_holes';\nimport iterableToArray from './_iterable_to_array';\nimport nonIterableSpread from './_non_iterable_spread';\n\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n","'use strict';\r\n\r\nexport default function (document) {\r\n\r\n  // Private fields\r\n\r\n  const _startSymbol = 0;\r\n  let _symbols;\r\n  let _symbolsTerminalOffset;\r\n  let _endMarker;\r\n  let _rules;\r\n  let _collection;\r\n  let _parseTable;\r\n  let _parseTableHasConflict;\r\n  let _parseSteps;\r\n\r\n  // Private functions for parsing\r\n  \r\n  const top = stack => (\r\n    stack[stack.length - 1]\r\n  );\r\n\r\n  const itemsEqual = (i1, i2) => (\r\n    i1.rule === i2.rule && i1.position === i2.position && i1.lookahead === i2.lookahead\r\n  );\r\n\r\n  const setsEqual = (s1, s2) => {\r\n    if (s1.length !== s2.length) {\r\n      return false;\r\n    }\r\n    let v = [];\r\n    for (let state = 0; state < s1.length; ++state) {\r\n      for (let j = 0; j < s1.length; ++j) {\r\n        if (!v.includes(j) && itemsEqual(s1[state], s2[j])) {\r\n          v.push(j);\r\n        }\r\n      }\r\n    }\r\n    return v.length === s1.length;\r\n  };\r\n\r\n  const actionsEqual = (a1, a2) => {\r\n    if (a1.type !== a2.type) {\r\n      return false;\r\n    }\r\n    switch (a1.type) {\r\n      case 'accept':\r\n        return true;\r\n      case 'shift':\r\n        return a1.state === a2.state;\r\n      case 'reduce':\r\n        return a1.rule === a2.rule;\r\n      case 'conflict':\r\n        return false;\r\n    }\r\n  };\r\n\r\n  const isNonTerminal = symbol => (\r\n    symbol < _symbolsTerminalOffset && symbol > 0\r\n  );\r\n\r\n  const isTerminal = symbol => (\r\n    symbol >= _symbolsTerminalOffset && symbol < _symbols.length - 1\r\n  );\r\n\r\n  const isTerminalOrEndMarker = symbol => (\r\n    symbol >= _symbolsTerminalOffset && symbol < _symbols.length\r\n  );\r\n\r\n  const first = symbol => {\r\n    if (isTerminalOrEndMarker(symbol)) {\r\n      return [symbol];\r\n    }\r\n    let f = [];\r\n    for (let i = 0; i < _rules.length; ++i) {\r\n      if (_rules[i].lhs === symbol && _rules[i].rhs[0] !== symbol) {\r\n        let fn = first(_rules[i].rhs[0]);\r\n        for (let j = 0; j < fn.length; ++j) {\r\n          f.push(fn[j]);\r\n        }\r\n      }\r\n    }\r\n    return f;\r\n  };\r\n\r\n  const closure = set => {\r\n    let closureSet = set.slice(0);\r\n    let newItemAdded = true;\r\n    while (newItemAdded) {\r\n      newItemAdded = false;\r\n      for (let i = 0; i < closureSet.length; ++i) {\r\n        let symbol = closureSet[i].rule.rhs[closureSet[i].position];\r\n        for (let j = 0; j < _rules.length; ++j) {\r\n          if (_rules[j].lhs === symbol) {\r\n            let f = first(\r\n              closureSet[i].position + 1 < closureSet[i].rule.rhs.length ?\r\n              closureSet[i].rule.rhs[closureSet[i].position + 1] :\r\n              closureSet[i].lookahead);\r\n            for (let k = 0; k < f.length; ++k) {\r\n              let item = {\r\n                rule: _rules[j],\r\n                position: 0,\r\n                lookahead: f[k]\r\n              };\r\n              let newItem = true;\r\n              for (let m = 0; m < closureSet.length; ++m) {\r\n                if (itemsEqual(closureSet[m], item)) {\r\n                  newItem = false;\r\n                  break;\r\n                }\r\n              }\r\n              if (newItem) {\r\n                closureSet.push(item);\r\n                newItemAdded = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return closureSet;\r\n  };\r\n\r\n  const goTo = (set, symbol) => {\r\n    let gotoSet = [];\r\n    for (let i = 0; i < set.length; ++i) {\r\n      if (set[i].rule.rhs[set[i].position] === symbol) {\r\n        gotoSet.push({\r\n          rule: set[i].rule,\r\n          position: set[i].position + 1,\r\n          lookahead: set[i].lookahead\r\n        });\r\n      }\r\n    }\r\n    return closure(gotoSet);\r\n  };\r\n\r\n  const scan = input => {\r\n    let s = input.trim().split(/\\s+/);\r\n    let r = [];\r\n    for (let i = 0; i < s.length; ++i) {\r\n      let t = _symbols.indexOf(s[i]);\r\n      if (!isTerminal(t)) {\r\n        return false;\r\n      }\r\n      r.push(t);\r\n    }\r\n    r.push(_endMarker);\r\n    return r;\r\n  };\r\n\r\n  const addRuleToParseTree = (tree, rule) => {\r\n    if (tree.symbol === rule.lhs && tree.children.length === 0) {\r\n      for (let i = 0; i < rule.rhs.length; ++i) {\r\n        tree.children.push({\r\n          symbol: rule.rhs[i],\r\n          children: []\r\n        });\r\n      }\r\n      return true;\r\n    }\r\n    for (let i = tree.children.length - 1; i >= 0; --i) {\r\n      if (addRuleToParseTree(tree.children[i], rule)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const getParseTree = () => {\r\n    let tree;\r\n    for (let i = _parseSteps.length - 1; i >= 0; --i) {\r\n      if (_parseSteps[i].action.type === 'reduce') {\r\n        if (tree === undefined) {\r\n          tree = {\r\n            symbol: _parseSteps[i].action.rule.lhs,\r\n            children: []\r\n          };\r\n        }\r\n        addRuleToParseTree(tree, _parseSteps[i].action.rule);\r\n      }\r\n    }\r\n    return tree;\r\n  };\r\n\r\n  const createCollection = () => {\r\n    _collection = [\r\n      closure([{\r\n        rule: _rules[0],\r\n        position: 0,\r\n        lookahead: _endMarker\r\n      }])\r\n    ];\r\n    let newSetAdded = true;\r\n    while (newSetAdded) {\r\n      newSetAdded = false;\r\n      for (let i = 0; i < _collection.length; ++i) {\r\n        for (let symbol = 1; symbol < _symbols.length - 1; ++symbol) {\r\n          let set = goTo(_collection[i], symbol);\r\n          if (set.length !== 0) {\r\n            let newSet = true;\r\n            for (let j = 0; j < _collection.length; ++j) {\r\n              if (setsEqual(_collection[j], set)) {\r\n                newSet = false;\r\n                break;\r\n              }\r\n            }\r\n            if (newSet) {\r\n              _collection.push(set);\r\n              newSetAdded = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const addActionToParseTable = (state, symbol, action) => {\r\n    if (_parseTable[state][symbol] === undefined) {\r\n      _parseTable[state][symbol] = action;\r\n    } else if (_parseTable[state][symbol].type === 'conflict') {\r\n      let newAction = true;\r\n      for (let i = 0; i < _parseTable[state][symbol].actions.length; ++i) {\r\n        if (actionsEqual(_parseTable[state][symbol].actions[i], action)) {\r\n          newAction = false;\r\n          break;\r\n        }\r\n      }\r\n      if (newAction) {\r\n        _parseTable[state][symbol].actions.push(action);\r\n      }\r\n    } else if (!actionsEqual(_parseTable[state][symbol], action)) {\r\n      _parseTable[state][symbol] = {\r\n        type: 'conflict',\r\n        actions: [_parseTable[state][symbol], action]\r\n      };\r\n      _parseTableHasConflict = true;\r\n    }\r\n  };\r\n\r\n  const createParseTable = () => {\r\n    _parseTable = new Array(_collection.length);\r\n    _parseTableHasConflict = false;\r\n    for (let i = 0; i < _collection.length; ++i) {\r\n      _parseTable[i] = new Array(_symbols.length);\r\n      for (let j = 0; j < _collection[i].length; ++j) {\r\n        let symbol = _collection[i][j].rule.rhs[_collection[i][j].position];\r\n        if (isTerminal(symbol)) {\r\n          let gotoSet = goTo(_collection[i], symbol);\r\n          for (let k = 0; k < _collection.length; ++k) {\r\n            if (setsEqual(_collection[k], gotoSet)) {\r\n              addActionToParseTable(i, symbol, {\r\n                type: 'shift',\r\n                state: k\r\n              });\r\n            }\r\n          }\r\n        }\r\n        if (_collection[i][j].position === _collection[i][j].rule.rhs.length) {\r\n          if (_collection[i][j].rule.lhs !== _startSymbol) {\r\n            addActionToParseTable(i, _collection[i][j].lookahead, {\r\n              type: 'reduce',\r\n              rule: _collection[i][j].rule\r\n            });\r\n          } else if (_collection[i][j].lookahead === _endMarker) {\r\n            _parseTable[i][_endMarker] = { type: 'accept' };\r\n          }\r\n        }\r\n      }\r\n      for (let symbol = 1; symbol < _symbolsTerminalOffset; ++symbol) {\r\n        let gotoSet = goTo(_collection[i], symbol);\r\n        for (let k = 0; k < _collection.length; ++k) {\r\n          if (setsEqual(_collection[k], gotoSet)) {\r\n            _parseTable[i][symbol] = k;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Public API for parsing\r\n\r\n  this.createParser = grammarStr => {\r\n    _symbols = [];\r\n    let lines = grammarStr.trim().split(/[\\r\\n]+/);\r\n    let rulesSymbols = [];\r\n    for (let i = 0; i < lines.length; ++i) {\r\n      rulesSymbols[i] = lines[i].trim().split(/\\s+/);\r\n      if (!_symbols.includes(rulesSymbols[i][0])) {\r\n        _symbols.push(rulesSymbols[i][0]);\r\n      }\r\n    }\r\n    _symbolsTerminalOffset = _symbols.length;\r\n    for (let i = 0; i < rulesSymbols.length; ++i) {\r\n      for (let j = 0; j < rulesSymbols[i].length; ++j) {\r\n        if (!_symbols.includes(rulesSymbols[i][j])) {\r\n          _symbols.push(rulesSymbols[i][j]);\r\n        }\r\n      }\r\n    }\r\n    _endMarker = _symbols.length;\r\n    _symbols.push('$');\r\n    _rules = [];\r\n    for (let i = 0; i < rulesSymbols.length; ++i) {\r\n      _rules[i] = {\r\n        index: i,\r\n        rhs: []\r\n      };\r\n      for (let j = 0; j < rulesSymbols[i].length; ++j) {\r\n        if (j === 0) {\r\n          _rules[i].lhs = _symbols.indexOf(rulesSymbols[i][j]);\r\n        } else {\r\n          _rules[i].rhs.push(_symbols.indexOf(rulesSymbols[i][j]));\r\n        }\r\n      }\r\n    }\r\n    createCollection();\r\n    createParseTable();\r\n  };\r\n  \r\n  this.parse = inputStr => {\r\n    if (_parseTable === undefined) {\r\n      return;\r\n    }\r\n    _parseSteps = [];\r\n    if (_parseTableHasConflict) {\r\n      _parseSteps.push({\r\n        stateStack: [],\r\n        symbolStack: [],\r\n        input: [],\r\n        action: {\r\n          type: 'error',\r\n          error: 'conflict in parse table'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    let input = scan(inputStr);\r\n    if (input === false) {\r\n      _parseSteps.push({\r\n        stateStack: [],\r\n        symbolStack: [],\r\n        input: [],\r\n        action: {\r\n          type: 'error',\r\n          error: 'syntax error'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    let stateStack = [0];\r\n    let symbolStack = [];\r\n    while (true) {\r\n      let action = _parseTable[top(stateStack)][input[0]];\r\n      if (action === undefined) {\r\n        action = {\r\n          type: 'error',\r\n          error: 'parse error'\r\n        };\r\n      }\r\n      \r\n      _parseSteps.push({\r\n        stateStack: stateStack.slice(0),\r\n        symbolStack: symbolStack.slice(0),\r\n        input: input.slice(0),\r\n        action: action\r\n      });\r\n      switch (action.type) {\r\n        case 'shift':\r\n          symbolStack.push(input.shift());\r\n          stateStack.push(action.state);\r\n          break;\r\n        case 'reduce':\r\n          for (let i = 0; i < action.rule.rhs.length; ++i) {\r\n            symbolStack.pop();\r\n            stateStack.pop();\r\n          }\r\n          symbolStack.push(action.rule.lhs);\r\n          stateStack.push(_parseTable[top(stateStack)][action.rule.lhs]);\r\n          break;\r\n        case 'accept':\r\n        case 'error':\r\n          return;\r\n      }\r\n    }\r\n  };\r\n\r\n  this.clear = () => {\r\n    _symbols =\r\n    _symbolsTerminalOffset =\r\n    _endMarker =\r\n    _rules =\r\n    _collection =\r\n    _parseTable =\r\n    _parseTableHasConflict =\r\n    _parseSteps =\r\n    undefined;\r\n  };\r\n\r\n  // Private functions for rendering\r\n\r\n  const actionStr = action => {\r\n    switch (action.type) {\r\n      case 'accept':\r\n        return 'acc';\r\n      case 'shift':\r\n        return 's' + action.state;\r\n      case 'reduce':\r\n        return 'r' + action.rule.index;\r\n      case 'error':\r\n        return 'error: ' + action.error;\r\n      case 'conflict':\r\n        let str = actionStr(action.actions[0]);\r\n        for (let state = 1; state < action.actions.length; ++state) {\r\n          str += ',' + actionStr(action.actions[state]);\r\n        }\r\n        return str;\r\n    }\r\n  };\r\n\r\n  const symbolClass = symbol => {\r\n    if (symbol === _startSymbol) {\r\n      return 'start-symbol';\r\n    }\r\n    if (symbol === _endMarker) {\r\n      return 'end-marker';\r\n    }\r\n    if (isNonTerminal(symbol)) {\r\n      return 'non-terminal';\r\n    }\r\n    if (isTerminal(symbol)) {\r\n      return 'terminal';\r\n    }\r\n  };\r\n\r\n  const arrowNode = () => (\r\n    document.createTextNode(' \\u2192 ')\r\n  );\r\n\r\n  const bulletNode = () => (\r\n    document.createTextNode('\\u2022')\r\n  );\r\n\r\n  const element = (tag, content, classes, attrs) => {\r\n    let node = document.createElement(tag);\r\n    let contentItems;\r\n    if (content === undefined) {\r\n      contentItems = [];\r\n    } else if (Array.isArray(content)) {\r\n      contentItems = content;\r\n    } else {\r\n      contentItems = [content];\r\n    }\r\n    contentItems.forEach(contentItem => {\r\n      if (typeof contentItem === 'object') {\r\n        node.appendChild(contentItem);\r\n      } else {\r\n        node.appendChild(document.createTextNode(contentItem));\r\n      }\r\n    });\r\n    if (classes !== undefined) {\r\n      if (Array.isArray(classes)) {\r\n        node.classList.add(...classes);\r\n      } else {\r\n        node.classList.add(classes);\r\n      }\r\n    }\r\n    if (attrs !== undefined) {\r\n      Object.keys(attrs).forEach(key => {\r\n        node[key] = attrs[key];\r\n      });\r\n    }\r\n    return node;\r\n  };\r\n\r\n  const symbolNode = (symbol, additionalClass) => {\r\n    let classes = [symbolClass(symbol)];\r\n    if (additionalClass !== undefined) {\r\n      classes.push(additionalClass);\r\n    }\r\n    return element('b', _symbols[symbol], classes);\r\n  };\r\n\r\n  const symbolsNodes = symbols => (\r\n    symbols.map(symbol => (\r\n      symbolNode(symbol)\r\n    ))\r\n  );\r\n\r\n  const ruleNodes = rule => [\r\n    symbolNode(rule.lhs),\r\n    arrowNode(),\r\n    ...symbolsNodes(rule.rhs)\r\n  ];\r\n\r\n  const itemNodes = item => {\r\n    let nodes = [\r\n      symbolNode(item.rule.lhs),\r\n      arrowNode()\r\n    ];\r\n    item.rule.rhs.forEach((rhsSymbol, i) => {\r\n      if (item.position === i) {\r\n        nodes.push(bulletNode());\r\n      }\r\n      nodes.push(symbolNode(rhsSymbol));\r\n    });\r\n    if (item.position === item.rule.rhs.length) {\r\n      nodes.push(bulletNode());\r\n    }\r\n    nodes.push(document.createTextNode(','));\r\n    nodes.push(symbolNode(item.lookahead, 'lookahead'));\r\n    return nodes;\r\n  };\r\n\r\n  const treeNode = tree => {\r\n    if (tree === undefined) {\r\n      return undefined;\r\n    }\r\n    let ulNode = document.createElement('ul');\r\n    let liNode = document.createElement('li');\r\n    liNode.classList.add(symbolClass(tree.symbol));\r\n    ulNode.appendChild(liNode);\r\n    let spanNode = document.createElement('span');\r\n    spanNode.appendChild(document.createTextNode(_symbols[tree.symbol]));\r\n    liNode.appendChild(spanNode);\r\n    tree.children.forEach(child => {\r\n      let node = treeNode(child);\r\n      if (node !== undefined) {\r\n        ulNode.appendChild(node);\r\n      }\r\n    });\r\n    return ulNode;\r\n  };\r\n\r\n  // Public API for rendering\r\n\r\n  this.renderGrammar = container => {\r\n    container.innerHTML = '';\r\n    if (_symbols === undefined) {\r\n      return;\r\n    }\r\n    let preNode = document.createElement('pre');\r\n    _rules.forEach((rule, i) => {\r\n      preNode.appendChild(element('i', i + ' '));\r\n      ruleNodes(rule).forEach(ruleNode => {\r\n        preNode.appendChild(ruleNode);\r\n      });\r\n      if (i !== _rules.length - 1) {\r\n        preNode.appendChild(document.createElement('br'));\r\n      }\r\n    });\r\n    container.appendChild(preNode);\r\n  };\r\n  \r\n  this.renderCollection = container => {\r\n    container.innerHTML = '';\r\n    if (_collection === undefined) {\r\n      return;\r\n    }\r\n    let preNode = document.createElement('pre');\r\n    _collection.forEach((set, setIndex) => {\r\n      set.forEach((item, itemIndex) => {\r\n        preNode.appendChild(element('i',\r\n          itemIndex === 0 ?\r\n          ['I', element('sub', setIndex), ' '] :\r\n          undefined\r\n        ));\r\n        itemNodes(item).forEach(itemNode => {\r\n          preNode.appendChild(itemNode);\r\n        });\r\n        if (itemIndex !== set.length - 1) {\r\n          preNode.appendChild(document.createElement('br'));\r\n        }\r\n      });\r\n      if (setIndex !== _collection.length - 1) {\r\n        preNode.appendChild(document.createElement('br'));\r\n        preNode.appendChild(document.createElement('br'));\r\n      }\r\n    });\r\n    container.appendChild(preNode);\r\n  };\r\n  \r\n  this.renderParseTable = container => {\r\n    container.innerHTML = '';\r\n    if (_parseTable === undefined) {\r\n      return;\r\n    }\r\n    let tableNode = document.createElement('table');\r\n    let theadNode = document.createElement('thead');\r\n    tableNode.appendChild(theadNode);\r\n    let theadTr1Node = document.createElement('tr');\r\n    theadNode.appendChild(theadTr1Node);\r\n    let theadTr2Node = document.createElement('tr');\r\n    theadNode.appendChild(theadTr2Node);\r\n    let tbodyNode = document.createElement('tbody');\r\n    tableNode.appendChild(tbodyNode);\r\n    theadTr1Node.appendChild(element('th', 'state', undefined, { rowSpan: 2 }));\r\n    theadTr1Node.appendChild(element('th', 'action', undefined, { colSpan: _symbols.length - _symbolsTerminalOffset }));\r\n    theadTr1Node.appendChild(element('th', 'goto', undefined, { colSpan: _symbolsTerminalOffset - 1 }));\r\n    for (let s = _symbolsTerminalOffset; s < _symbols.length; ++s) {\r\n      let classes = ['action'];\r\n      if (s === _endMarker) {\r\n        classes.push('end-marker');\r\n      }\r\n      theadTr2Node.appendChild(element('th', _symbols[s], classes));\r\n    }\r\n    for (let s = 1; s < _symbolsTerminalOffset; ++s) {\r\n      theadTr2Node.appendChild(element('th', _symbols[s], 'goto'));\r\n    }\r\n    for (let i = 0; i < _parseTable.length; ++i) {\r\n      let trNode = document.createElement('tr');\r\n      tbodyNode.appendChild(trNode);\r\n      trNode.appendChild(element('td', i));\r\n      for (let s = _symbolsTerminalOffset; s < _symbols.length; ++s) {\r\n        if (_parseTable[i][s] === undefined) {\r\n          trNode.appendChild(element('td', undefined, 'error'));\r\n        } else {\r\n          trNode.appendChild(element('td', actionStr(_parseTable[i][s]), _parseTable[i][s].type));\r\n        }\r\n      }\r\n      for (let s = 1; s < _symbolsTerminalOffset; ++s) {\r\n        trNode.appendChild(element('td', _parseTable[i][s]));\r\n      }\r\n    }\r\n    container.appendChild(tableNode);\r\n  };\r\n  \r\n  this.renderParseSteps = container => {\r\n    container.innerHTML = '';\r\n    if (_parseSteps === undefined) {\r\n      return;\r\n    }\r\n    let tableNode = document.createElement('table');\r\n    let theadNode = document.createElement('thead');\r\n    tableNode.appendChild(theadNode);\r\n    let theadTrNode = document.createElement('tr');\r\n    theadNode.appendChild(theadTrNode);\r\n    let tbodyNode = document.createElement('tbody');\r\n    tableNode.appendChild(tbodyNode);\r\n    theadTrNode.appendChild(element('th', 'state stack'));\r\n    theadTrNode.appendChild(element('th', 'symbol stack'));\r\n    theadTrNode.appendChild(element('th', 'input'));\r\n    theadTrNode.appendChild(element('th', 'action'));\r\n    theadTrNode.appendChild(element('th', 'output'));\r\n    _parseSteps.forEach(step => {\r\n      let trNode = document.createElement('tr');\r\n      tbodyNode.appendChild(trNode);\r\n      trNode.appendChild(element('td', document.createTextNode(step.stateStack.join(' '))));\r\n      trNode.appendChild(element('td', symbolsNodes(step.symbolStack)));\r\n      trNode.appendChild(element('td', symbolsNodes(step.input)));\r\n      trNode.appendChild(element('td', actionStr(step.action), step.action.type));\r\n      trNode.appendChild(element('td',\r\n        step.action.type === 'reduce' ?\r\n        ruleNodes(step.action.rule) :\r\n        undefined\r\n      ));\r\n    });\r\n    container.appendChild(tableNode);\r\n  };\r\n  \r\n  this.renderParseTree = container => {\r\n    container.innerHTML = '';\r\n    if (_parseSteps === undefined) {\r\n      return;\r\n    }\r\n    let ulNode = treeNode(getParseTree());\r\n    if (ulNode !== undefined) {\r\n      container.appendChild(ulNode);\r\n    }\r\n  };\r\n\r\n  // Public API for samples\r\n\r\n  this.sampleGrammar = () => (\r\n    \"S' G\\n\" +\r\n    'G E = E\\n' +\r\n    'G id\\n' +\r\n    'E E + T\\n' +\r\n    'E T\\n' +\r\n    'T T * id\\n' +\r\n    'T id'\r\n  );\r\n\r\n  this.sampleInput = () => (\r\n    'id = id + id * id'\r\n  );\r\n\r\n};\r\n","'use strict';\n\nimport 'normalize.css';\nimport '../styles/index.scss';\nimport Lr1ParserVis from './Lr1ParserVis';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n  const lr1ParserVis = new Lr1ParserVis(document);\n\n  const grammarText = document.getElementById('grammar-text');\n  const inputText = document.getElementById('input-text');\n  const containers = {\n    grammar: document.getElementById('grammar-container'),\n    collection: document.getElementById('collection-container'),\n    parseTable: document.getElementById('parse-table-container'),\n    parseSteps: document.getElementById('parse-steps-container'),\n    parseTree: document.getElementById('parse-tree-container'),\n  };\n\n  const emptyContainers = () => {\n    Object.keys(containers).forEach(key => {\n      containers[key].innerHTML = '';\n    });\n  };\n\n  const createParser = () => {\n    emptyContainers();\n    lr1ParserVis.createParser(grammarText.value);\n    lr1ParserVis.renderGrammar(containers.grammar);\n    lr1ParserVis.renderCollection(containers.collection);\n    lr1ParserVis.renderParseTable(containers.parseTable);\n  };\n\n  const parse = () => {\n    lr1ParserVis.parse(inputText.value);\n    lr1ParserVis.renderParseSteps(containers.parseSteps);\n    lr1ParserVis.renderParseTree(containers.parseTree);\n  };\n\n  const showExample = () => {\n    grammarText.value = lr1ParserVis.sampleGrammar();\n    createParser();\n    inputText.value = lr1ParserVis.sampleInput();\n    parse();\n  };\n\n  const clear = () => {\n    grammarText.value = '';\n    inputText.value = '';\n    emptyContainers();\n    lr1ParserVis.clear();\n  };\n\n  document.getElementById('create-parser').addEventListener('click', createParser);\n  document.getElementById('parse').addEventListener('click', parse);\n  document.getElementById('show-example').addEventListener('click', showExample);\n  document.getElementById('clear').addEventListener('click', clear);\n\n});\n"],"names":["arr","Array","isArray","i","arr2","length","$725e4043c26ceca4de75540b031afa72$export$9099ad97b570f7c","iter","Symbol","iterator","Object","prototype","toString","call","from","$443f7c98a713ba808b3e63ba6b4a4d57$export$9099ad97b570f7c","TypeError","$15b66d9ede3fa169e1b51b9c6430fe23$export$9099ad97b570f7c","_classList","document","_symbols","_symbolsTerminalOffset","_endMarker","_rules","_collection","_parseTable","_parseTableHasConflict","_parseSteps","top","stack","itemsEqual","i1","i2","rule","position","lookahead","setsEqual","s1","s2","v","state","j","includes","push","actionsEqual","a1","a2","type","isTerminal","symbol","first","isTerminalOrEndMarker","f","lhs","rhs","fn","closure","set","closureSet","slice","newItemAdded","k","item","newItem","m","goTo","gotoSet","addRuleToParseTree","tree","children","addActionToParseTable","action","undefined","newAction","actions","createParser","grammarStr","lines","trim","split","rulesSymbols","index","indexOf","newSetAdded","newSet","createCollection","createParseTable","parse","inputStr","stateStack","symbolStack","input","error","s","r","t","scan","shift","pop","clear","actionStr","str","symbolClass","isNonTerminal","arrowNode","createTextNode","bulletNode","element","tag","content","classes","attrs","node","createElement","forEach","contentItem","appendChild","classList","add","apply","$eb9658592856d6e4f9b3b59f7a4578db$export$9099ad97b570f7c","keys","key","symbolNode","additionalClass","symbolsNodes","symbols","map","ruleNodes","concat","treeNode","ulNode","liNode","spanNode","child","renderGrammar","container","innerHTML","preNode","ruleNode","renderCollection","setIndex","itemIndex","nodes","rhsSymbol","itemNodes","itemNode","renderParseTable","tableNode","theadNode","theadTr1Node","theadTr2Node","tbodyNode","rowSpan","colSpan","trNode","s3","renderParseSteps","theadTrNode","step","join","renderParseTree","getParseTree","sampleGrammar","sampleInput","addEventListener","lr1ParserVis","$eae945db79ba048387d01d2f2aa0225d$export$9099ad97b570f7c","grammarText","getElementById","inputText","containers","grammar","collection","parseTable","parseSteps","parseTree","emptyContainers","value"],"version":3,"file":"index.4dcef67b.js.map"}