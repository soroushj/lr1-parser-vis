{"mappings":"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","sources":["node_modules/@swc/helpers/src/_to_consumable_array.js","node_modules/@swc/helpers/src/_array_without_holes.js","node_modules/@swc/helpers/src/_iterable_to_array.js","node_modules/@swc/helpers/src/_non_iterable_spread.js","src/scripts/Lr1ParserVis.js","src/scripts/index.js"],"sourcesContent":["import arrayWithoutHoles from './_array_without_holes';\nimport iterableToArray from './_iterable_to_array';\nimport nonIterableSpread from './_non_iterable_spread';\n\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n","'use strict';\r\n\r\nexport default function (document) {\r\n\r\n  // Private fields\r\n\r\n  const _startSymbol = 0;\r\n  let _symbols;\r\n  let _symbolsTerminalOffset;\r\n  let _endMarker;\r\n  let _rules;\r\n  let _collection;\r\n  let _parseTable;\r\n  let _parseTableHasConflict;\r\n  let _parseSteps;\r\n\r\n  // Private functions for parsing\r\n  \r\n  const top = stack => (\r\n    stack[stack.length - 1]\r\n  );\r\n\r\n  const itemsEqual = (i1, i2) => (\r\n    i1.rule === i2.rule && i1.position === i2.position && i1.lookahead === i2.lookahead\r\n  );\r\n\r\n  const setsEqual = (s1, s2) => {\r\n    if (s1.length !== s2.length) {\r\n      return false;\r\n    }\r\n    let v = [];\r\n    for (let state = 0; state < s1.length; ++state) {\r\n      for (let j = 0; j < s1.length; ++j) {\r\n        if (!v.includes(j) && itemsEqual(s1[state], s2[j])) {\r\n          v.push(j);\r\n        }\r\n      }\r\n    }\r\n    return v.length === s1.length;\r\n  };\r\n\r\n  const actionsEqual = (a1, a2) => {\r\n    if (a1.type !== a2.type) {\r\n      return false;\r\n    }\r\n    switch (a1.type) {\r\n      case 'accept':\r\n        return true;\r\n      case 'shift':\r\n        return a1.state === a2.state;\r\n      case 'reduce':\r\n        return a1.rule === a2.rule;\r\n      case 'conflict':\r\n        return false;\r\n    }\r\n  };\r\n\r\n  const isNonTerminal = symbol => (\r\n    symbol < _symbolsTerminalOffset && symbol > 0\r\n  );\r\n\r\n  const isTerminal = symbol => (\r\n    symbol >= _symbolsTerminalOffset && symbol < _symbols.length - 1\r\n  );\r\n\r\n  const isTerminalOrEndMarker = symbol => (\r\n    symbol >= _symbolsTerminalOffset && symbol < _symbols.length\r\n  );\r\n\r\n  const first = symbol => {\r\n    if (isTerminalOrEndMarker(symbol)) {\r\n      return [symbol];\r\n    }\r\n    let f = [];\r\n    for (let i = 0; i < _rules.length; ++i) {\r\n      if (_rules[i].lhs === symbol && _rules[i].rhs[0] !== symbol) {\r\n        let fn = first(_rules[i].rhs[0]);\r\n        for (let j = 0; j < fn.length; ++j) {\r\n          f.push(fn[j]);\r\n        }\r\n      }\r\n    }\r\n    return f;\r\n  };\r\n\r\n  const closure = set => {\r\n    let closureSet = set.slice(0);\r\n    let newItemAdded = true;\r\n    while (newItemAdded) {\r\n      newItemAdded = false;\r\n      for (let i = 0; i < closureSet.length; ++i) {\r\n        let symbol = closureSet[i].rule.rhs[closureSet[i].position];\r\n        for (let j = 0; j < _rules.length; ++j) {\r\n          if (_rules[j].lhs === symbol) {\r\n            let f = first(\r\n              closureSet[i].position + 1 < closureSet[i].rule.rhs.length ?\r\n              closureSet[i].rule.rhs[closureSet[i].position + 1] :\r\n              closureSet[i].lookahead);\r\n            for (let k = 0; k < f.length; ++k) {\r\n              let item = {\r\n                rule: _rules[j],\r\n                position: 0,\r\n                lookahead: f[k]\r\n              };\r\n              let newItem = true;\r\n              for (let m = 0; m < closureSet.length; ++m) {\r\n                if (itemsEqual(closureSet[m], item)) {\r\n                  newItem = false;\r\n                  break;\r\n                }\r\n              }\r\n              if (newItem) {\r\n                closureSet.push(item);\r\n                newItemAdded = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return closureSet;\r\n  };\r\n\r\n  const goTo = (set, symbol) => {\r\n    let gotoSet = [];\r\n    for (let i = 0; i < set.length; ++i) {\r\n      if (set[i].rule.rhs[set[i].position] === symbol) {\r\n        gotoSet.push({\r\n          rule: set[i].rule,\r\n          position: set[i].position + 1,\r\n          lookahead: set[i].lookahead\r\n        });\r\n      }\r\n    }\r\n    return closure(gotoSet);\r\n  };\r\n\r\n  const scan = input => {\r\n    let s = input.trim().split(/\\s+/);\r\n    let r = [];\r\n    for (let i = 0; i < s.length; ++i) {\r\n      let t = _symbols.indexOf(s[i]);\r\n      if (!isTerminal(t)) {\r\n        return false;\r\n      }\r\n      r.push(t);\r\n    }\r\n    r.push(_endMarker);\r\n    return r;\r\n  };\r\n\r\n  const addRuleToParseTree = (tree, rule) => {\r\n    if (tree.symbol === rule.lhs && tree.children.length === 0) {\r\n      for (let i = 0; i < rule.rhs.length; ++i) {\r\n        tree.children.push({\r\n          symbol: rule.rhs[i],\r\n          children: []\r\n        });\r\n      }\r\n      return true;\r\n    }\r\n    for (let i = tree.children.length - 1; i >= 0; --i) {\r\n      if (addRuleToParseTree(tree.children[i], rule)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const getParseTree = () => {\r\n    let tree;\r\n    for (let i = _parseSteps.length - 1; i >= 0; --i) {\r\n      if (_parseSteps[i].action.type === 'reduce') {\r\n        if (tree === undefined) {\r\n          tree = {\r\n            symbol: _parseSteps[i].action.rule.lhs,\r\n            children: []\r\n          };\r\n        }\r\n        addRuleToParseTree(tree, _parseSteps[i].action.rule);\r\n      }\r\n    }\r\n    return tree;\r\n  };\r\n\r\n  const createCollection = () => {\r\n    _collection = [\r\n      closure([{\r\n        rule: _rules[0],\r\n        position: 0,\r\n        lookahead: _endMarker\r\n      }])\r\n    ];\r\n    let newSetAdded = true;\r\n    while (newSetAdded) {\r\n      newSetAdded = false;\r\n      for (let i = 0; i < _collection.length; ++i) {\r\n        for (let symbol = 1; symbol < _symbols.length - 1; ++symbol) {\r\n          let set = goTo(_collection[i], symbol);\r\n          if (set.length !== 0) {\r\n            let newSet = true;\r\n            for (let j = 0; j < _collection.length; ++j) {\r\n              if (setsEqual(_collection[j], set)) {\r\n                newSet = false;\r\n                break;\r\n              }\r\n            }\r\n            if (newSet) {\r\n              _collection.push(set);\r\n              newSetAdded = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const addActionToParseTable = (state, symbol, action) => {\r\n    if (_parseTable[state][symbol] === undefined) {\r\n      _parseTable[state][symbol] = action;\r\n    } else if (_parseTable[state][symbol].type === 'conflict') {\r\n      let newAction = true;\r\n      for (let i = 0; i < _parseTable[state][symbol].actions.length; ++i) {\r\n        if (actionsEqual(_parseTable[state][symbol].actions[i], action)) {\r\n          newAction = false;\r\n          break;\r\n        }\r\n      }\r\n      if (newAction) {\r\n        _parseTable[state][symbol].actions.push(action);\r\n      }\r\n    } else if (!actionsEqual(_parseTable[state][symbol], action)) {\r\n      _parseTable[state][symbol] = {\r\n        type: 'conflict',\r\n        actions: [_parseTable[state][symbol], action]\r\n      };\r\n      _parseTableHasConflict = true;\r\n    }\r\n  };\r\n\r\n  const createParseTable = () => {\r\n    _parseTable = new Array(_collection.length);\r\n    _parseTableHasConflict = false;\r\n    for (let i = 0; i < _collection.length; ++i) {\r\n      _parseTable[i] = new Array(_symbols.length);\r\n      for (let j = 0; j < _collection[i].length; ++j) {\r\n        let symbol = _collection[i][j].rule.rhs[_collection[i][j].position];\r\n        if (isTerminal(symbol)) {\r\n          let gotoSet = goTo(_collection[i], symbol);\r\n          for (let k = 0; k < _collection.length; ++k) {\r\n            if (setsEqual(_collection[k], gotoSet)) {\r\n              addActionToParseTable(i, symbol, {\r\n                type: 'shift',\r\n                state: k\r\n              });\r\n            }\r\n          }\r\n        }\r\n        if (_collection[i][j].position === _collection[i][j].rule.rhs.length) {\r\n          if (_collection[i][j].rule.lhs !== _startSymbol) {\r\n            addActionToParseTable(i, _collection[i][j].lookahead, {\r\n              type: 'reduce',\r\n              rule: _collection[i][j].rule\r\n            });\r\n          } else if (_collection[i][j].lookahead === _endMarker) {\r\n            _parseTable[i][_endMarker] = { type: 'accept' };\r\n          }\r\n        }\r\n      }\r\n      for (let symbol = 1; symbol < _symbolsTerminalOffset; ++symbol) {\r\n        let gotoSet = goTo(_collection[i], symbol);\r\n        for (let k = 0; k < _collection.length; ++k) {\r\n          if (setsEqual(_collection[k], gotoSet)) {\r\n            _parseTable[i][symbol] = k;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Public API for parsing\r\n\r\n  this.createParser = grammarStr => {\r\n    _symbols = [];\r\n    let lines = grammarStr.trim().split(/[\\r\\n]+/);\r\n    let rulesSymbols = [];\r\n    for (let i = 0; i < lines.length; ++i) {\r\n      rulesSymbols[i] = lines[i].trim().split(/\\s+/);\r\n      if (!_symbols.includes(rulesSymbols[i][0])) {\r\n        _symbols.push(rulesSymbols[i][0]);\r\n      }\r\n    }\r\n    _symbolsTerminalOffset = _symbols.length;\r\n    for (let i = 0; i < rulesSymbols.length; ++i) {\r\n      for (let j = 0; j < rulesSymbols[i].length; ++j) {\r\n        if (!_symbols.includes(rulesSymbols[i][j])) {\r\n          _symbols.push(rulesSymbols[i][j]);\r\n        }\r\n      }\r\n    }\r\n    _endMarker = _symbols.length;\r\n    _symbols.push('$');\r\n    _rules = [];\r\n    for (let i = 0; i < rulesSymbols.length; ++i) {\r\n      _rules[i] = {\r\n        index: i,\r\n        rhs: []\r\n      };\r\n      for (let j = 0; j < rulesSymbols[i].length; ++j) {\r\n        if (j === 0) {\r\n          _rules[i].lhs = _symbols.indexOf(rulesSymbols[i][j]);\r\n        } else {\r\n          _rules[i].rhs.push(_symbols.indexOf(rulesSymbols[i][j]));\r\n        }\r\n      }\r\n    }\r\n    createCollection();\r\n    createParseTable();\r\n  };\r\n  \r\n  this.parse = inputStr => {\r\n    if (_parseTable === undefined) {\r\n      return;\r\n    }\r\n    _parseSteps = [];\r\n    if (_parseTableHasConflict) {\r\n      _parseSteps.push({\r\n        stateStack: [],\r\n        symbolStack: [],\r\n        input: [],\r\n        action: {\r\n          type: 'error',\r\n          error: 'conflict in parse table'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    let input = scan(inputStr);\r\n    if (input === false) {\r\n      _parseSteps.push({\r\n        stateStack: [],\r\n        symbolStack: [],\r\n        input: [],\r\n        action: {\r\n          type: 'error',\r\n          error: 'syntax error'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    let stateStack = [0];\r\n    let symbolStack = [];\r\n    while (true) {\r\n      let action = _parseTable[top(stateStack)][input[0]];\r\n      if (action === undefined) {\r\n        action = {\r\n          type: 'error',\r\n          error: 'parse error'\r\n        };\r\n      }\r\n      \r\n      _parseSteps.push({\r\n        stateStack: stateStack.slice(0),\r\n        symbolStack: symbolStack.slice(0),\r\n        input: input.slice(0),\r\n        action: action\r\n      });\r\n      switch (action.type) {\r\n        case 'shift':\r\n          symbolStack.push(input.shift());\r\n          stateStack.push(action.state);\r\n          break;\r\n        case 'reduce':\r\n          for (let i = 0; i < action.rule.rhs.length; ++i) {\r\n            symbolStack.pop();\r\n            stateStack.pop();\r\n          }\r\n          symbolStack.push(action.rule.lhs);\r\n          stateStack.push(_parseTable[top(stateStack)][action.rule.lhs]);\r\n          break;\r\n        case 'accept':\r\n        case 'error':\r\n          return;\r\n      }\r\n    }\r\n  };\r\n\r\n  this.clear = () => {\r\n    _symbols =\r\n    _symbolsTerminalOffset =\r\n    _endMarker =\r\n    _rules =\r\n    _collection =\r\n    _parseTable =\r\n    _parseTableHasConflict =\r\n    _parseSteps =\r\n    undefined;\r\n  };\r\n\r\n  // Private functions for rendering\r\n\r\n  const actionStr = action => {\r\n    switch (action.type) {\r\n      case 'accept':\r\n        return 'acc';\r\n      case 'shift':\r\n        return 's' + action.state;\r\n      case 'reduce':\r\n        return 'r' + action.rule.index;\r\n      case 'error':\r\n        return 'error: ' + action.error;\r\n      case 'conflict':\r\n        let str = actionStr(action.actions[0]);\r\n        for (let state = 1; state < action.actions.length; ++state) {\r\n          str += ',' + actionStr(action.actions[state]);\r\n        }\r\n        return str;\r\n    }\r\n  };\r\n\r\n  const symbolClass = symbol => {\r\n    if (symbol === _startSymbol) {\r\n      return 'start-symbol';\r\n    }\r\n    if (symbol === _endMarker) {\r\n      return 'end-marker';\r\n    }\r\n    if (isNonTerminal(symbol)) {\r\n      return 'non-terminal';\r\n    }\r\n    if (isTerminal(symbol)) {\r\n      return 'terminal';\r\n    }\r\n  };\r\n\r\n  const arrowNode = () => (\r\n    document.createTextNode(' \\u2192 ')\r\n  );\r\n\r\n  const bulletNode = () => (\r\n    document.createTextNode('\\u2022')\r\n  );\r\n\r\n  const element = (tag, content, classes, attrs) => {\r\n    let node = document.createElement(tag);\r\n    let contentItems;\r\n    if (content === undefined) {\r\n      contentItems = [];\r\n    } else if (Array.isArray(content)) {\r\n      contentItems = content;\r\n    } else {\r\n      contentItems = [content];\r\n    }\r\n    contentItems.forEach(contentItem => {\r\n      if (typeof contentItem === 'object') {\r\n        node.appendChild(contentItem);\r\n      } else {\r\n        node.appendChild(document.createTextNode(contentItem));\r\n      }\r\n    });\r\n    if (classes !== undefined) {\r\n      if (Array.isArray(classes)) {\r\n        node.classList.add(...classes);\r\n      } else {\r\n        node.classList.add(classes);\r\n      }\r\n    }\r\n    if (attrs !== undefined) {\r\n      Object.keys(attrs).forEach(key => {\r\n        node[key] = attrs[key];\r\n      });\r\n    }\r\n    return node;\r\n  };\r\n\r\n  const symbolNode = (symbol, additionalClass) => {\r\n    let classes = [symbolClass(symbol)];\r\n    if (additionalClass !== undefined) {\r\n      classes.push(additionalClass);\r\n    }\r\n    return element('b', _symbols[symbol], classes);\r\n  };\r\n\r\n  const symbolsNodes = symbols => (\r\n    symbols.map(symbol => (\r\n      symbolNode(symbol)\r\n    ))\r\n  );\r\n\r\n  const ruleNodes = rule => [\r\n    symbolNode(rule.lhs),\r\n    arrowNode(),\r\n    ...symbolsNodes(rule.rhs)\r\n  ];\r\n\r\n  const itemNodes = item => {\r\n    let nodes = [\r\n      symbolNode(item.rule.lhs),\r\n      arrowNode()\r\n    ];\r\n    item.rule.rhs.forEach((rhsSymbol, i) => {\r\n      if (item.position === i) {\r\n        nodes.push(bulletNode());\r\n      }\r\n      nodes.push(symbolNode(rhsSymbol));\r\n    });\r\n    if (item.position === item.rule.rhs.length) {\r\n      nodes.push(bulletNode());\r\n    }\r\n    nodes.push(document.createTextNode(','));\r\n    nodes.push(symbolNode(item.lookahead, 'lookahead'));\r\n    return nodes;\r\n  };\r\n\r\n  const treeNode = tree => {\r\n    if (tree === undefined) {\r\n      return undefined;\r\n    }\r\n    let ulNode = document.createElement('ul');\r\n    let liNode = document.createElement('li');\r\n    liNode.classList.add(symbolClass(tree.symbol));\r\n    ulNode.appendChild(liNode);\r\n    let spanNode = document.createElement('span');\r\n    spanNode.appendChild(document.createTextNode(_symbols[tree.symbol]));\r\n    liNode.appendChild(spanNode);\r\n    tree.children.forEach(child => {\r\n      let node = treeNode(child);\r\n      if (node !== undefined) {\r\n        ulNode.appendChild(node);\r\n      }\r\n    });\r\n    return ulNode;\r\n  };\r\n\r\n  // Public API for rendering\r\n\r\n  this.renderGrammar = container => {\r\n    container.innerHTML = '';\r\n    if (_symbols === undefined) {\r\n      return;\r\n    }\r\n    let preNode = document.createElement('pre');\r\n    _rules.forEach((rule, i) => {\r\n      preNode.appendChild(element('i', i + ' '));\r\n      ruleNodes(rule).forEach(ruleNode => {\r\n        preNode.appendChild(ruleNode);\r\n      });\r\n      if (i !== _rules.length - 1) {\r\n        preNode.appendChild(document.createElement('br'));\r\n      }\r\n    });\r\n    container.appendChild(preNode);\r\n  };\r\n  \r\n  this.renderCollection = container => {\r\n    container.innerHTML = '';\r\n    if (_collection === undefined) {\r\n      return;\r\n    }\r\n    let preNode = document.createElement('pre');\r\n    _collection.forEach((set, setIndex) => {\r\n      set.forEach((item, itemIndex) => {\r\n        preNode.appendChild(element('i',\r\n          itemIndex === 0 ?\r\n          ['I', element('sub', setIndex), ' '] :\r\n          undefined\r\n        ));\r\n        itemNodes(item).forEach(itemNode => {\r\n          preNode.appendChild(itemNode);\r\n        });\r\n        if (itemIndex !== set.length - 1) {\r\n          preNode.appendChild(document.createElement('br'));\r\n        }\r\n      });\r\n      if (setIndex !== _collection.length - 1) {\r\n        preNode.appendChild(document.createElement('br'));\r\n        preNode.appendChild(document.createElement('br'));\r\n      }\r\n    });\r\n    container.appendChild(preNode);\r\n  };\r\n  \r\n  this.renderParseTable = container => {\r\n    container.innerHTML = '';\r\n    if (_parseTable === undefined) {\r\n      return;\r\n    }\r\n    let tableNode = document.createElement('table');\r\n    let theadNode = document.createElement('thead');\r\n    tableNode.appendChild(theadNode);\r\n    let theadTr1Node = document.createElement('tr');\r\n    theadNode.appendChild(theadTr1Node);\r\n    let theadTr2Node = document.createElement('tr');\r\n    theadNode.appendChild(theadTr2Node);\r\n    let tbodyNode = document.createElement('tbody');\r\n    tableNode.appendChild(tbodyNode);\r\n    theadTr1Node.appendChild(element('th', 'state', undefined, { rowSpan: 2 }));\r\n    theadTr1Node.appendChild(element('th', 'action', undefined, { colSpan: _symbols.length - _symbolsTerminalOffset }));\r\n    theadTr1Node.appendChild(element('th', 'goto', undefined, { colSpan: _symbolsTerminalOffset - 1 }));\r\n    for (let s = _symbolsTerminalOffset; s < _symbols.length; ++s) {\r\n      let classes = ['action'];\r\n      if (s === _endMarker) {\r\n        classes.push('end-marker');\r\n      }\r\n      theadTr2Node.appendChild(element('th', _symbols[s], classes));\r\n    }\r\n    for (let s = 1; s < _symbolsTerminalOffset; ++s) {\r\n      theadTr2Node.appendChild(element('th', _symbols[s], 'goto'));\r\n    }\r\n    for (let i = 0; i < _parseTable.length; ++i) {\r\n      let trNode = document.createElement('tr');\r\n      tbodyNode.appendChild(trNode);\r\n      trNode.appendChild(element('td', i));\r\n      for (let s = _symbolsTerminalOffset; s < _symbols.length; ++s) {\r\n        if (_parseTable[i][s] === undefined) {\r\n          trNode.appendChild(element('td', undefined, 'error'));\r\n        } else {\r\n          trNode.appendChild(element('td', actionStr(_parseTable[i][s]), _parseTable[i][s].type));\r\n        }\r\n      }\r\n      for (let s = 1; s < _symbolsTerminalOffset; ++s) {\r\n        trNode.appendChild(element('td', _parseTable[i][s]));\r\n      }\r\n    }\r\n    container.appendChild(tableNode);\r\n  };\r\n  \r\n  this.renderParseSteps = container => {\r\n    container.innerHTML = '';\r\n    if (_parseSteps === undefined) {\r\n      return;\r\n    }\r\n    let tableNode = document.createElement('table');\r\n    let theadNode = document.createElement('thead');\r\n    tableNode.appendChild(theadNode);\r\n    let theadTrNode = document.createElement('tr');\r\n    theadNode.appendChild(theadTrNode);\r\n    let tbodyNode = document.createElement('tbody');\r\n    tableNode.appendChild(tbodyNode);\r\n    theadTrNode.appendChild(element('th', 'state stack'));\r\n    theadTrNode.appendChild(element('th', 'symbol stack'));\r\n    theadTrNode.appendChild(element('th', 'input'));\r\n    theadTrNode.appendChild(element('th', 'action'));\r\n    theadTrNode.appendChild(element('th', 'output'));\r\n    _parseSteps.forEach(step => {\r\n      let trNode = document.createElement('tr');\r\n      tbodyNode.appendChild(trNode);\r\n      trNode.appendChild(element('td', document.createTextNode(step.stateStack.join(' '))));\r\n      trNode.appendChild(element('td', symbolsNodes(step.symbolStack)));\r\n      trNode.appendChild(element('td', symbolsNodes(step.input)));\r\n      trNode.appendChild(element('td', actionStr(step.action), step.action.type));\r\n      trNode.appendChild(element('td',\r\n        step.action.type === 'reduce' ?\r\n        ruleNodes(step.action.rule) :\r\n        undefined\r\n      ));\r\n    });\r\n    container.appendChild(tableNode);\r\n  };\r\n  \r\n  this.renderParseTree = container => {\r\n    container.innerHTML = '';\r\n    if (_parseSteps === undefined) {\r\n      return;\r\n    }\r\n    let ulNode = treeNode(getParseTree());\r\n    if (ulNode !== undefined) {\r\n      container.appendChild(ulNode);\r\n    }\r\n  };\r\n\r\n  // Public API for samples\r\n\r\n  this.sampleGrammar = () => (\r\n    \"S' G\\n\" +\r\n    'G E = E\\n' +\r\n    'G id\\n' +\r\n    'E E + T\\n' +\r\n    'E T\\n' +\r\n    'T T * id\\n' +\r\n    'T id'\r\n  );\r\n\r\n  this.sampleInput = () => (\r\n    'id = id + id * id'\r\n  );\r\n\r\n};\r\n","'use strict';\n\nimport 'normalize.css';\nimport '../styles/index.scss';\nimport Lr1ParserVis from './Lr1ParserVis';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n  const lr1ParserVis = new Lr1ParserVis(document);\n\n  const grammarText = document.getElementById('grammar-text');\n  const inputText = document.getElementById('input-text');\n  const containers = {\n    grammar: document.getElementById('grammar-container'),\n    collection: document.getElementById('collection-container'),\n    parseTable: document.getElementById('parse-table-container'),\n    parseSteps: document.getElementById('parse-steps-container'),\n    parseTree: document.getElementById('parse-tree-container'),\n  };\n\n  const emptyContainers = () => {\n    Object.keys(containers).forEach(key => {\n      containers[key].innerHTML = '';\n    });\n  };\n\n  const createParser = () => {\n    emptyContainers();\n    lr1ParserVis.createParser(grammarText.value);\n    lr1ParserVis.renderGrammar(containers.grammar);\n    lr1ParserVis.renderCollection(containers.collection);\n    lr1ParserVis.renderParseTable(containers.parseTable);\n  };\n\n  const parse = () => {\n    lr1ParserVis.parse(inputText.value);\n    lr1ParserVis.renderParseSteps(containers.parseSteps);\n    lr1ParserVis.renderParseTree(containers.parseTree);\n  };\n\n  const showExample = () => {\n    grammarText.value = lr1ParserVis.sampleGrammar();\n    createParser();\n    inputText.value = lr1ParserVis.sampleInput();\n    parse();\n  };\n\n  const clear = () => {\n    grammarText.value = '';\n    inputText.value = '';\n    emptyContainers();\n    lr1ParserVis.clear();\n  };\n\n  document.getElementById('create-parser').addEventListener('click', createParser);\n  document.getElementById('parse').addEventListener('click', parse);\n  document.getElementById('show-example').addEventListener('click', showExample);\n  document.getElementById('clear').addEventListener('click', clear);\n\n});\n"],"names":["arr","Array","isArray","i","arr2","length","$19ba95953c0b3914$export$2e2bcd8739ae039","iter","Symbol","iterator","Object","prototype","toString","call","from","$c46dd327d17bb5e6$export$2e2bcd8739ae039","TypeError","$e0397ad0cf8bc90a$export$2e2bcd8739ae039","document","_symbols","_symbolsTerminalOffset","_endMarker","_rules","_collection","_parseTable","_parseTableHasConflict","_parseSteps","top","stack","itemsEqual","i1","i2","rule","position","lookahead","setsEqual","s1","s2","v","state","j","includes","push","actionsEqual","a1","a2","type","isTerminal","symbol","first","isTerminalOrEndMarker","f","lhs","rhs","fn","closure","set","closureSet","slice","newItemAdded","k","item","newItem","m","goTo","gotoSet","addRuleToParseTree","tree","children","addActionToParseTable","action","undefined","newAction","actions","this","createParser","grammarStr","lines","trim","split","rulesSymbols","i3","index","j1","indexOf","newSetAdded","newSet","createCollection","symbol1","gotoSet1","k1","createParseTable","parse","inputStr","stateStack","symbolStack","input","error","s","r","t","scan","shift","pop","clear","actionStr","str","symbolClass","isNonTerminal","arrowNode","createTextNode","bulletNode","element","tag","content","classes","attrs","_classList","node","createElement","forEach","contentItem","appendChild","classList","add","apply","$49c94d0142231589$export$2e2bcd8739ae039","keys","key","symbolNode","additionalClass","symbolsNodes","symbols","map","ruleNodes","concat","treeNode","ulNode","liNode","spanNode","child","renderGrammar","container","innerHTML","preNode","ruleNode","renderCollection","setIndex","itemIndex","nodes","rhsSymbol","itemNodes","itemNode","renderParseTable","tableNode","theadNode","theadTr1Node","theadTr2Node","tbodyNode","rowSpan","colSpan","trNode","s3","renderParseSteps","theadTrNode","step","join","renderParseTree","getParseTree","sampleGrammar","sampleInput","addEventListener","lr1ParserVis","$6d587d8fec4dc32e$export$2e2bcd8739ae039","grammarText","getElementById","inputText","containers","grammar","collection","parseTable","parseSteps","parseTree","emptyContainers","value"],"version":3,"file":"index.b8933e22.js.map"}