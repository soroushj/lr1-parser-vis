{"mappings":"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","sources":["<anon>","src/scripts/index.js","src/scripts/Lr1ParserVis.js"],"sourcesContent":["\n\n\"use strict\";\nfunction $6aa6a539d62107d1$export$2e2bcd8739ae039(document) {\n    // Private fields\n    const _startSymbol = 0;\n    let _symbols;\n    let _symbolsTerminalOffset;\n    let _endMarker;\n    let _rules;\n    let _collection;\n    let _parseTable;\n    let _parseTableHasConflict;\n    let _parseSteps;\n    // Private functions for parsing\n    const top = (stack)=>stack[stack.length - 1];\n    const itemsEqual = (i1, i2)=>i1.rule === i2.rule && i1.position === i2.position && i1.lookahead === i2.lookahead;\n    const setsEqual = (s1, s2)=>{\n        if (s1.length !== s2.length) return false;\n        let v = [];\n        for(let state = 0; state < s1.length; ++state){\n            for(let j = 0; j < s1.length; ++j)if (!v.includes(j) && itemsEqual(s1[state], s2[j])) v.push(j);\n        }\n        return v.length === s1.length;\n    };\n    const actionsEqual = (a1, a2)=>{\n        if (a1.type !== a2.type) return false;\n        switch(a1.type){\n            case \"accept\":\n                return true;\n            case \"shift\":\n                return a1.state === a2.state;\n            case \"reduce\":\n                return a1.rule === a2.rule;\n            case \"conflict\":\n                return false;\n        }\n    };\n    const isNonTerminal = (symbol)=>symbol < _symbolsTerminalOffset && symbol > 0;\n    const isTerminal = (symbol)=>symbol >= _symbolsTerminalOffset && symbol < _symbols.length - 1;\n    const isTerminalOrEndMarker = (symbol)=>symbol >= _symbolsTerminalOffset && symbol < _symbols.length;\n    const first = (symbol)=>{\n        if (isTerminalOrEndMarker(symbol)) return [\n            symbol\n        ];\n        let f = [];\n        for(let i = 0; i < _rules.length; ++i)if (_rules[i].lhs === symbol && _rules[i].rhs[0] !== symbol) {\n            let fn = first(_rules[i].rhs[0]);\n            for(let j = 0; j < fn.length; ++j)f.push(fn[j]);\n        }\n        return f;\n    };\n    const closure = (set)=>{\n        let closureSet = set.slice(0);\n        let newItemAdded = true;\n        while(newItemAdded){\n            newItemAdded = false;\n            for(let i = 0; i < closureSet.length; ++i){\n                let symbol = closureSet[i].rule.rhs[closureSet[i].position];\n                for(let j = 0; j < _rules.length; ++j)if (_rules[j].lhs === symbol) {\n                    let f = first(closureSet[i].position + 1 < closureSet[i].rule.rhs.length ? closureSet[i].rule.rhs[closureSet[i].position + 1] : closureSet[i].lookahead);\n                    for(let k = 0; k < f.length; ++k){\n                        let item = {\n                            rule: _rules[j],\n                            position: 0,\n                            lookahead: f[k]\n                        };\n                        let newItem = true;\n                        for(let m = 0; m < closureSet.length; ++m)if (itemsEqual(closureSet[m], item)) {\n                            newItem = false;\n                            break;\n                        }\n                        if (newItem) {\n                            closureSet.push(item);\n                            newItemAdded = true;\n                        }\n                    }\n                }\n            }\n        }\n        return closureSet;\n    };\n    const goTo = (set, symbol)=>{\n        let gotoSet = [];\n        for(let i = 0; i < set.length; ++i)if (set[i].rule.rhs[set[i].position] === symbol) gotoSet.push({\n            rule: set[i].rule,\n            position: set[i].position + 1,\n            lookahead: set[i].lookahead\n        });\n        return closure(gotoSet);\n    };\n    const scan = (input)=>{\n        let s = input.trim().split(/\\s+/);\n        let r = [];\n        for(let i = 0; i < s.length; ++i){\n            let t = _symbols.indexOf(s[i]);\n            if (!isTerminal(t)) return false;\n            r.push(t);\n        }\n        r.push(_endMarker);\n        return r;\n    };\n    const addRuleToParseTree = (tree, rule)=>{\n        if (tree.symbol === rule.lhs && tree.children.length === 0) {\n            for(let i = 0; i < rule.rhs.length; ++i)tree.children.push({\n                symbol: rule.rhs[i],\n                children: []\n            });\n            return true;\n        }\n        for(let i = tree.children.length - 1; i >= 0; --i){\n            if (addRuleToParseTree(tree.children[i], rule)) return true;\n        }\n        return false;\n    };\n    const getParseTree = ()=>{\n        let tree;\n        for(let i = _parseSteps.length - 1; i >= 0; --i)if (_parseSteps[i].action.type === \"reduce\") {\n            if (tree === undefined) tree = {\n                symbol: _parseSteps[i].action.rule.lhs,\n                children: []\n            };\n            addRuleToParseTree(tree, _parseSteps[i].action.rule);\n        }\n        return tree;\n    };\n    const createCollection = ()=>{\n        _collection = [\n            closure([\n                {\n                    rule: _rules[0],\n                    position: 0,\n                    lookahead: _endMarker\n                }\n            ])\n        ];\n        let newSetAdded = true;\n        while(newSetAdded){\n            newSetAdded = false;\n            for(let i = 0; i < _collection.length; ++i)for(let symbol = 1; symbol < _symbols.length - 1; ++symbol){\n                let set = goTo(_collection[i], symbol);\n                if (set.length !== 0) {\n                    let newSet = true;\n                    for(let j = 0; j < _collection.length; ++j)if (setsEqual(_collection[j], set)) {\n                        newSet = false;\n                        break;\n                    }\n                    if (newSet) {\n                        _collection.push(set);\n                        newSetAdded = true;\n                    }\n                }\n            }\n        }\n    };\n    const addActionToParseTable = (state, symbol, action)=>{\n        if (_parseTable[state][symbol] === undefined) _parseTable[state][symbol] = action;\n        else if (_parseTable[state][symbol].type === \"conflict\") {\n            let newAction = true;\n            for(let i = 0; i < _parseTable[state][symbol].actions.length; ++i)if (actionsEqual(_parseTable[state][symbol].actions[i], action)) {\n                newAction = false;\n                break;\n            }\n            if (newAction) _parseTable[state][symbol].actions.push(action);\n        } else if (!actionsEqual(_parseTable[state][symbol], action)) {\n            _parseTable[state][symbol] = {\n                type: \"conflict\",\n                actions: [\n                    _parseTable[state][symbol],\n                    action\n                ]\n            };\n            _parseTableHasConflict = true;\n        }\n    };\n    const createParseTable = ()=>{\n        _parseTable = new Array(_collection.length);\n        _parseTableHasConflict = false;\n        for(let i = 0; i < _collection.length; ++i){\n            _parseTable[i] = new Array(_symbols.length);\n            for(let j = 0; j < _collection[i].length; ++j){\n                let symbol = _collection[i][j].rule.rhs[_collection[i][j].position];\n                if (isTerminal(symbol)) {\n                    let gotoSet = goTo(_collection[i], symbol);\n                    for(let k = 0; k < _collection.length; ++k)if (setsEqual(_collection[k], gotoSet)) addActionToParseTable(i, symbol, {\n                        type: \"shift\",\n                        state: k\n                    });\n                }\n                if (_collection[i][j].position === _collection[i][j].rule.rhs.length) {\n                    if (_collection[i][j].rule.lhs !== _startSymbol) addActionToParseTable(i, _collection[i][j].lookahead, {\n                        type: \"reduce\",\n                        rule: _collection[i][j].rule\n                    });\n                    else if (_collection[i][j].lookahead === _endMarker) _parseTable[i][_endMarker] = {\n                        type: \"accept\"\n                    };\n                }\n            }\n            for(let symbol = 1; symbol < _symbolsTerminalOffset; ++symbol){\n                let gotoSet = goTo(_collection[i], symbol);\n                for(let k = 0; k < _collection.length; ++k)if (setsEqual(_collection[k], gotoSet)) _parseTable[i][symbol] = k;\n            }\n        }\n    };\n    // Public API for parsing\n    this.createParser = (grammarStr)=>{\n        _symbols = [];\n        let lines = grammarStr.trim().split(/[\\r\\n]+/);\n        let rulesSymbols = [];\n        for(let i = 0; i < lines.length; ++i){\n            rulesSymbols[i] = lines[i].trim().split(/\\s+/);\n            if (!_symbols.includes(rulesSymbols[i][0])) _symbols.push(rulesSymbols[i][0]);\n        }\n        _symbolsTerminalOffset = _symbols.length;\n        for(let i = 0; i < rulesSymbols.length; ++i){\n            for(let j = 0; j < rulesSymbols[i].length; ++j)if (!_symbols.includes(rulesSymbols[i][j])) _symbols.push(rulesSymbols[i][j]);\n        }\n        _endMarker = _symbols.length;\n        _symbols.push(\"$\");\n        _rules = [];\n        for(let i = 0; i < rulesSymbols.length; ++i){\n            _rules[i] = {\n                index: i,\n                rhs: []\n            };\n            for(let j = 0; j < rulesSymbols[i].length; ++j)if (j === 0) _rules[i].lhs = _symbols.indexOf(rulesSymbols[i][j]);\n            else _rules[i].rhs.push(_symbols.indexOf(rulesSymbols[i][j]));\n        }\n        createCollection();\n        createParseTable();\n    };\n    this.parse = (inputStr)=>{\n        if (_parseTable === undefined) return;\n        _parseSteps = [];\n        if (_parseTableHasConflict) {\n            _parseSteps.push({\n                stateStack: [],\n                symbolStack: [],\n                input: [],\n                action: {\n                    type: \"error\",\n                    error: \"conflict in parse table\"\n                }\n            });\n            return;\n        }\n        let input = scan(inputStr);\n        if (input === false) {\n            _parseSteps.push({\n                stateStack: [],\n                symbolStack: [],\n                input: [],\n                action: {\n                    type: \"error\",\n                    error: \"syntax error\"\n                }\n            });\n            return;\n        }\n        let stateStack = [\n            0\n        ];\n        let symbolStack = [];\n        while(true){\n            let action = _parseTable[top(stateStack)][input[0]];\n            if (action === undefined) action = {\n                type: \"error\",\n                error: \"parse error\"\n            };\n            _parseSteps.push({\n                stateStack: stateStack.slice(0),\n                symbolStack: symbolStack.slice(0),\n                input: input.slice(0),\n                action: action\n            });\n            switch(action.type){\n                case \"shift\":\n                    symbolStack.push(input.shift());\n                    stateStack.push(action.state);\n                    break;\n                case \"reduce\":\n                    for(let i = 0; i < action.rule.rhs.length; ++i){\n                        symbolStack.pop();\n                        stateStack.pop();\n                    }\n                    symbolStack.push(action.rule.lhs);\n                    stateStack.push(_parseTable[top(stateStack)][action.rule.lhs]);\n                    break;\n                case \"accept\":\n                case \"error\":\n                    return;\n            }\n        }\n    };\n    this.clear = ()=>{\n        _symbols = _symbolsTerminalOffset = _endMarker = _rules = _collection = _parseTable = _parseTableHasConflict = _parseSteps = undefined;\n    };\n    // Private functions for rendering\n    const actionStr = (action)=>{\n        switch(action.type){\n            case \"accept\":\n                return \"acc\";\n            case \"shift\":\n                return \"s\" + action.state;\n            case \"reduce\":\n                return \"r\" + action.rule.index;\n            case \"error\":\n                return \"error: \" + action.error;\n            case \"conflict\":\n                let str = actionStr(action.actions[0]);\n                for(let state = 1; state < action.actions.length; ++state)str += \",\" + actionStr(action.actions[state]);\n                return str;\n        }\n    };\n    const symbolClass = (symbol)=>{\n        if (symbol === _startSymbol) return \"start-symbol\";\n        if (symbol === _endMarker) return \"end-marker\";\n        if (isNonTerminal(symbol)) return \"non-terminal\";\n        if (isTerminal(symbol)) return \"terminal\";\n    };\n    const arrowNode = ()=>document.createTextNode(\" → \");\n    const bulletNode = ()=>document.createTextNode(\"•\");\n    const element = (tag, content, classes, attrs)=>{\n        let node = document.createElement(tag);\n        let contentItems;\n        if (content === undefined) contentItems = [];\n        else if (Array.isArray(content)) contentItems = content;\n        else contentItems = [\n            content\n        ];\n        contentItems.forEach((contentItem)=>{\n            if (typeof contentItem === \"object\") node.appendChild(contentItem);\n            else node.appendChild(document.createTextNode(contentItem));\n        });\n        if (classes !== undefined) {\n            if (Array.isArray(classes)) node.classList.add(...classes);\n            else node.classList.add(classes);\n        }\n        if (attrs !== undefined) Object.keys(attrs).forEach((key)=>{\n            node[key] = attrs[key];\n        });\n        return node;\n    };\n    const symbolNode = (symbol, additionalClass)=>{\n        let classes = [\n            symbolClass(symbol)\n        ];\n        if (additionalClass !== undefined) classes.push(additionalClass);\n        return element(\"b\", _symbols[symbol], classes);\n    };\n    const symbolsNodes = (symbols)=>symbols.map((symbol)=>symbolNode(symbol));\n    const ruleNodes = (rule)=>[\n            symbolNode(rule.lhs),\n            arrowNode(),\n            ...symbolsNodes(rule.rhs)\n        ];\n    const itemNodes = (item)=>{\n        let nodes = [\n            symbolNode(item.rule.lhs),\n            arrowNode()\n        ];\n        item.rule.rhs.forEach((rhsSymbol, i)=>{\n            if (item.position === i) nodes.push(bulletNode());\n            nodes.push(symbolNode(rhsSymbol));\n        });\n        if (item.position === item.rule.rhs.length) nodes.push(bulletNode());\n        nodes.push(document.createTextNode(\",\"));\n        nodes.push(symbolNode(item.lookahead, \"lookahead\"));\n        return nodes;\n    };\n    const treeNode = (tree)=>{\n        if (tree === undefined) return undefined;\n        let ulNode = document.createElement(\"ul\");\n        let liNode = document.createElement(\"li\");\n        liNode.classList.add(symbolClass(tree.symbol));\n        ulNode.appendChild(liNode);\n        let spanNode = document.createElement(\"span\");\n        spanNode.appendChild(document.createTextNode(_symbols[tree.symbol]));\n        liNode.appendChild(spanNode);\n        tree.children.forEach((child)=>{\n            let node = treeNode(child);\n            if (node !== undefined) ulNode.appendChild(node);\n        });\n        return ulNode;\n    };\n    // Public API for rendering\n    this.renderGrammar = (container)=>{\n        container.innerHTML = \"\";\n        if (_symbols === undefined) return;\n        let preNode = document.createElement(\"pre\");\n        _rules.forEach((rule, i)=>{\n            preNode.appendChild(element(\"i\", i + \" \"));\n            ruleNodes(rule).forEach((ruleNode)=>{\n                preNode.appendChild(ruleNode);\n            });\n            if (i !== _rules.length - 1) preNode.appendChild(document.createElement(\"br\"));\n        });\n        container.appendChild(preNode);\n    };\n    this.renderCollection = (container)=>{\n        container.innerHTML = \"\";\n        if (_collection === undefined) return;\n        let preNode = document.createElement(\"pre\");\n        _collection.forEach((set, setIndex)=>{\n            set.forEach((item, itemIndex)=>{\n                preNode.appendChild(element(\"i\", itemIndex === 0 ? [\n                    \"I\",\n                    element(\"sub\", setIndex),\n                    \" \"\n                ] : undefined));\n                itemNodes(item).forEach((itemNode)=>{\n                    preNode.appendChild(itemNode);\n                });\n                if (itemIndex !== set.length - 1) preNode.appendChild(document.createElement(\"br\"));\n            });\n            if (setIndex !== _collection.length - 1) {\n                preNode.appendChild(document.createElement(\"br\"));\n                preNode.appendChild(document.createElement(\"br\"));\n            }\n        });\n        container.appendChild(preNode);\n    };\n    this.renderParseTable = (container)=>{\n        container.innerHTML = \"\";\n        if (_parseTable === undefined) return;\n        let tableNode = document.createElement(\"table\");\n        let theadNode = document.createElement(\"thead\");\n        tableNode.appendChild(theadNode);\n        let theadTr1Node = document.createElement(\"tr\");\n        theadNode.appendChild(theadTr1Node);\n        let theadTr2Node = document.createElement(\"tr\");\n        theadNode.appendChild(theadTr2Node);\n        let tbodyNode = document.createElement(\"tbody\");\n        tableNode.appendChild(tbodyNode);\n        theadTr1Node.appendChild(element(\"th\", \"state\", undefined, {\n            rowSpan: 2\n        }));\n        theadTr1Node.appendChild(element(\"th\", \"action\", undefined, {\n            colSpan: _symbols.length - _symbolsTerminalOffset\n        }));\n        theadTr1Node.appendChild(element(\"th\", \"goto\", undefined, {\n            colSpan: _symbolsTerminalOffset - 1\n        }));\n        for(let s = _symbolsTerminalOffset; s < _symbols.length; ++s){\n            let classes = [\n                \"action\"\n            ];\n            if (s === _endMarker) classes.push(\"end-marker\");\n            theadTr2Node.appendChild(element(\"th\", _symbols[s], classes));\n        }\n        for(let s = 1; s < _symbolsTerminalOffset; ++s)theadTr2Node.appendChild(element(\"th\", _symbols[s], \"goto\"));\n        for(let i = 0; i < _parseTable.length; ++i){\n            let trNode = document.createElement(\"tr\");\n            tbodyNode.appendChild(trNode);\n            trNode.appendChild(element(\"td\", i));\n            for(let s = _symbolsTerminalOffset; s < _symbols.length; ++s)if (_parseTable[i][s] === undefined) trNode.appendChild(element(\"td\", undefined, \"error\"));\n            else trNode.appendChild(element(\"td\", actionStr(_parseTable[i][s]), _parseTable[i][s].type));\n            for(let s = 1; s < _symbolsTerminalOffset; ++s)trNode.appendChild(element(\"td\", _parseTable[i][s]));\n        }\n        container.appendChild(tableNode);\n    };\n    this.renderParseSteps = (container)=>{\n        container.innerHTML = \"\";\n        if (_parseSteps === undefined) return;\n        let tableNode = document.createElement(\"table\");\n        let theadNode = document.createElement(\"thead\");\n        tableNode.appendChild(theadNode);\n        let theadTrNode = document.createElement(\"tr\");\n        theadNode.appendChild(theadTrNode);\n        let tbodyNode = document.createElement(\"tbody\");\n        tableNode.appendChild(tbodyNode);\n        theadTrNode.appendChild(element(\"th\", \"state stack\"));\n        theadTrNode.appendChild(element(\"th\", \"symbol stack\"));\n        theadTrNode.appendChild(element(\"th\", \"input\"));\n        theadTrNode.appendChild(element(\"th\", \"action\"));\n        theadTrNode.appendChild(element(\"th\", \"output\"));\n        _parseSteps.forEach((step)=>{\n            let trNode = document.createElement(\"tr\");\n            tbodyNode.appendChild(trNode);\n            trNode.appendChild(element(\"td\", document.createTextNode(step.stateStack.join(\" \"))));\n            trNode.appendChild(element(\"td\", symbolsNodes(step.symbolStack)));\n            trNode.appendChild(element(\"td\", symbolsNodes(step.input)));\n            trNode.appendChild(element(\"td\", actionStr(step.action), step.action.type));\n            trNode.appendChild(element(\"td\", step.action.type === \"reduce\" ? ruleNodes(step.action.rule) : undefined));\n        });\n        container.appendChild(tableNode);\n    };\n    this.renderParseTree = (container)=>{\n        container.innerHTML = \"\";\n        if (_parseSteps === undefined) return;\n        let ulNode = treeNode(getParseTree());\n        if (ulNode !== undefined) container.appendChild(ulNode);\n    };\n    // Public API for samples\n    this.sampleGrammar = ()=>\"S' G\\nG E = E\\nG id\\nE E + T\\nE T\\nT T * id\\nT id\";\n    this.sampleInput = ()=>\"id = id + id * id\";\n}\n\n\n\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const lr1ParserVis = new (0, $6aa6a539d62107d1$export$2e2bcd8739ae039)(document);\n    const grammarText = document.getElementById(\"grammar-text\");\n    const inputText = document.getElementById(\"input-text\");\n    const containers = {\n        grammar: document.getElementById(\"grammar-container\"),\n        collection: document.getElementById(\"collection-container\"),\n        parseTable: document.getElementById(\"parse-table-container\"),\n        parseSteps: document.getElementById(\"parse-steps-container\"),\n        parseTree: document.getElementById(\"parse-tree-container\")\n    };\n    const emptyContainers = ()=>{\n        Object.keys(containers).forEach((key)=>{\n            containers[key].innerHTML = \"\";\n        });\n    };\n    const createParser = ()=>{\n        emptyContainers();\n        lr1ParserVis.createParser(grammarText.value);\n        lr1ParserVis.renderGrammar(containers.grammar);\n        lr1ParserVis.renderCollection(containers.collection);\n        lr1ParserVis.renderParseTable(containers.parseTable);\n    };\n    const parse = ()=>{\n        lr1ParserVis.parse(inputText.value);\n        lr1ParserVis.renderParseSteps(containers.parseSteps);\n        lr1ParserVis.renderParseTree(containers.parseTree);\n    };\n    const showExample = ()=>{\n        grammarText.value = lr1ParserVis.sampleGrammar();\n        createParser();\n        inputText.value = lr1ParserVis.sampleInput();\n        parse();\n    };\n    const clear = ()=>{\n        grammarText.value = \"\";\n        inputText.value = \"\";\n        emptyContainers();\n        lr1ParserVis.clear();\n    };\n    document.getElementById(\"create-parser\").addEventListener(\"click\", createParser);\n    document.getElementById(\"parse\").addEventListener(\"click\", parse);\n    document.getElementById(\"show-example\").addEventListener(\"click\", showExample);\n    document.getElementById(\"clear\").addEventListener(\"click\", clear);\n});\n\n\n//# sourceMappingURL=index.13ab860d.js.map\n","'use strict';\n\nimport 'normalize.css';\nimport '../styles/index.scss';\nimport Lr1ParserVis from './Lr1ParserVis';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n  const lr1ParserVis = new Lr1ParserVis(document);\n\n  const grammarText = document.getElementById('grammar-text');\n  const inputText = document.getElementById('input-text');\n  const containers = {\n    grammar: document.getElementById('grammar-container'),\n    collection: document.getElementById('collection-container'),\n    parseTable: document.getElementById('parse-table-container'),\n    parseSteps: document.getElementById('parse-steps-container'),\n    parseTree: document.getElementById('parse-tree-container'),\n  };\n\n  const emptyContainers = () => {\n    Object.keys(containers).forEach(key => {\n      containers[key].innerHTML = '';\n    });\n  };\n\n  const createParser = () => {\n    emptyContainers();\n    lr1ParserVis.createParser(grammarText.value);\n    lr1ParserVis.renderGrammar(containers.grammar);\n    lr1ParserVis.renderCollection(containers.collection);\n    lr1ParserVis.renderParseTable(containers.parseTable);\n  };\n\n  const parse = () => {\n    lr1ParserVis.parse(inputText.value);\n    lr1ParserVis.renderParseSteps(containers.parseSteps);\n    lr1ParserVis.renderParseTree(containers.parseTree);\n  };\n\n  const showExample = () => {\n    grammarText.value = lr1ParserVis.sampleGrammar();\n    createParser();\n    inputText.value = lr1ParserVis.sampleInput();\n    parse();\n  };\n\n  const clear = () => {\n    grammarText.value = '';\n    inputText.value = '';\n    emptyContainers();\n    lr1ParserVis.clear();\n  };\n\n  document.getElementById('create-parser').addEventListener('click', createParser);\n  document.getElementById('parse').addEventListener('click', parse);\n  document.getElementById('show-example').addEventListener('click', showExample);\n  document.getElementById('clear').addEventListener('click', clear);\n\n});\n","'use strict';\r\n\r\nexport default function (document) {\r\n\r\n  // Private fields\r\n\r\n  const _startSymbol = 0;\r\n  let _symbols;\r\n  let _symbolsTerminalOffset;\r\n  let _endMarker;\r\n  let _rules;\r\n  let _collection;\r\n  let _parseTable;\r\n  let _parseTableHasConflict;\r\n  let _parseSteps;\r\n\r\n  // Private functions for parsing\r\n\r\n  const top = stack => (\r\n    stack[stack.length - 1]\r\n  );\r\n\r\n  const itemsEqual = (i1, i2) => (\r\n    i1.rule === i2.rule && i1.position === i2.position && i1.lookahead === i2.lookahead\r\n  );\r\n\r\n  const setsEqual = (s1, s2) => {\r\n    if (s1.length !== s2.length) {\r\n      return false;\r\n    }\r\n    let v = [];\r\n    for (let state = 0; state < s1.length; ++state) {\r\n      for (let j = 0; j < s1.length; ++j) {\r\n        if (!v.includes(j) && itemsEqual(s1[state], s2[j])) {\r\n          v.push(j);\r\n        }\r\n      }\r\n    }\r\n    return v.length === s1.length;\r\n  };\r\n\r\n  const actionsEqual = (a1, a2) => {\r\n    if (a1.type !== a2.type) {\r\n      return false;\r\n    }\r\n    switch (a1.type) {\r\n      case 'accept':\r\n        return true;\r\n      case 'shift':\r\n        return a1.state === a2.state;\r\n      case 'reduce':\r\n        return a1.rule === a2.rule;\r\n      case 'conflict':\r\n        return false;\r\n    }\r\n  };\r\n\r\n  const isNonTerminal = symbol => (\r\n    symbol < _symbolsTerminalOffset && symbol > 0\r\n  );\r\n\r\n  const isTerminal = symbol => (\r\n    symbol >= _symbolsTerminalOffset && symbol < _symbols.length - 1\r\n  );\r\n\r\n  const isTerminalOrEndMarker = symbol => (\r\n    symbol >= _symbolsTerminalOffset && symbol < _symbols.length\r\n  );\r\n\r\n  const first = symbol => {\r\n    if (isTerminalOrEndMarker(symbol)) {\r\n      return [symbol];\r\n    }\r\n    let f = [];\r\n    for (let i = 0; i < _rules.length; ++i) {\r\n      if (_rules[i].lhs === symbol && _rules[i].rhs[0] !== symbol) {\r\n        let fn = first(_rules[i].rhs[0]);\r\n        for (let j = 0; j < fn.length; ++j) {\r\n          f.push(fn[j]);\r\n        }\r\n      }\r\n    }\r\n    return f;\r\n  };\r\n\r\n  const closure = set => {\r\n    let closureSet = set.slice(0);\r\n    let newItemAdded = true;\r\n    while (newItemAdded) {\r\n      newItemAdded = false;\r\n      for (let i = 0; i < closureSet.length; ++i) {\r\n        let symbol = closureSet[i].rule.rhs[closureSet[i].position];\r\n        for (let j = 0; j < _rules.length; ++j) {\r\n          if (_rules[j].lhs === symbol) {\r\n            let f = first(\r\n              closureSet[i].position + 1 < closureSet[i].rule.rhs.length ?\r\n                closureSet[i].rule.rhs[closureSet[i].position + 1] :\r\n                closureSet[i].lookahead);\r\n            for (let k = 0; k < f.length; ++k) {\r\n              let item = {\r\n                rule: _rules[j],\r\n                position: 0,\r\n                lookahead: f[k]\r\n              };\r\n              let newItem = true;\r\n              for (let m = 0; m < closureSet.length; ++m) {\r\n                if (itemsEqual(closureSet[m], item)) {\r\n                  newItem = false;\r\n                  break;\r\n                }\r\n              }\r\n              if (newItem) {\r\n                closureSet.push(item);\r\n                newItemAdded = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return closureSet;\r\n  };\r\n\r\n  const goTo = (set, symbol) => {\r\n    let gotoSet = [];\r\n    for (let i = 0; i < set.length; ++i) {\r\n      if (set[i].rule.rhs[set[i].position] === symbol) {\r\n        gotoSet.push({\r\n          rule: set[i].rule,\r\n          position: set[i].position + 1,\r\n          lookahead: set[i].lookahead\r\n        });\r\n      }\r\n    }\r\n    return closure(gotoSet);\r\n  };\r\n\r\n  const scan = input => {\r\n    let s = input.trim().split(/\\s+/);\r\n    let r = [];\r\n    for (let i = 0; i < s.length; ++i) {\r\n      let t = _symbols.indexOf(s[i]);\r\n      if (!isTerminal(t)) {\r\n        return false;\r\n      }\r\n      r.push(t);\r\n    }\r\n    r.push(_endMarker);\r\n    return r;\r\n  };\r\n\r\n  const addRuleToParseTree = (tree, rule) => {\r\n    if (tree.symbol === rule.lhs && tree.children.length === 0) {\r\n      for (let i = 0; i < rule.rhs.length; ++i) {\r\n        tree.children.push({\r\n          symbol: rule.rhs[i],\r\n          children: []\r\n        });\r\n      }\r\n      return true;\r\n    }\r\n    for (let i = tree.children.length - 1; i >= 0; --i) {\r\n      if (addRuleToParseTree(tree.children[i], rule)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const getParseTree = () => {\r\n    let tree;\r\n    for (let i = _parseSteps.length - 1; i >= 0; --i) {\r\n      if (_parseSteps[i].action.type === 'reduce') {\r\n        if (tree === undefined) {\r\n          tree = {\r\n            symbol: _parseSteps[i].action.rule.lhs,\r\n            children: []\r\n          };\r\n        }\r\n        addRuleToParseTree(tree, _parseSteps[i].action.rule);\r\n      }\r\n    }\r\n    return tree;\r\n  };\r\n\r\n  const createCollection = () => {\r\n    _collection = [\r\n      closure([{\r\n        rule: _rules[0],\r\n        position: 0,\r\n        lookahead: _endMarker\r\n      }])\r\n    ];\r\n    let newSetAdded = true;\r\n    while (newSetAdded) {\r\n      newSetAdded = false;\r\n      for (let i = 0; i < _collection.length; ++i) {\r\n        for (let symbol = 1; symbol < _symbols.length - 1; ++symbol) {\r\n          let set = goTo(_collection[i], symbol);\r\n          if (set.length !== 0) {\r\n            let newSet = true;\r\n            for (let j = 0; j < _collection.length; ++j) {\r\n              if (setsEqual(_collection[j], set)) {\r\n                newSet = false;\r\n                break;\r\n              }\r\n            }\r\n            if (newSet) {\r\n              _collection.push(set);\r\n              newSetAdded = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const addActionToParseTable = (state, symbol, action) => {\r\n    if (_parseTable[state][symbol] === undefined) {\r\n      _parseTable[state][symbol] = action;\r\n    } else if (_parseTable[state][symbol].type === 'conflict') {\r\n      let newAction = true;\r\n      for (let i = 0; i < _parseTable[state][symbol].actions.length; ++i) {\r\n        if (actionsEqual(_parseTable[state][symbol].actions[i], action)) {\r\n          newAction = false;\r\n          break;\r\n        }\r\n      }\r\n      if (newAction) {\r\n        _parseTable[state][symbol].actions.push(action);\r\n      }\r\n    } else if (!actionsEqual(_parseTable[state][symbol], action)) {\r\n      _parseTable[state][symbol] = {\r\n        type: 'conflict',\r\n        actions: [_parseTable[state][symbol], action]\r\n      };\r\n      _parseTableHasConflict = true;\r\n    }\r\n  };\r\n\r\n  const createParseTable = () => {\r\n    _parseTable = new Array(_collection.length);\r\n    _parseTableHasConflict = false;\r\n    for (let i = 0; i < _collection.length; ++i) {\r\n      _parseTable[i] = new Array(_symbols.length);\r\n      for (let j = 0; j < _collection[i].length; ++j) {\r\n        let symbol = _collection[i][j].rule.rhs[_collection[i][j].position];\r\n        if (isTerminal(symbol)) {\r\n          let gotoSet = goTo(_collection[i], symbol);\r\n          for (let k = 0; k < _collection.length; ++k) {\r\n            if (setsEqual(_collection[k], gotoSet)) {\r\n              addActionToParseTable(i, symbol, {\r\n                type: 'shift',\r\n                state: k\r\n              });\r\n            }\r\n          }\r\n        }\r\n        if (_collection[i][j].position === _collection[i][j].rule.rhs.length) {\r\n          if (_collection[i][j].rule.lhs !== _startSymbol) {\r\n            addActionToParseTable(i, _collection[i][j].lookahead, {\r\n              type: 'reduce',\r\n              rule: _collection[i][j].rule\r\n            });\r\n          } else if (_collection[i][j].lookahead === _endMarker) {\r\n            _parseTable[i][_endMarker] = { type: 'accept' };\r\n          }\r\n        }\r\n      }\r\n      for (let symbol = 1; symbol < _symbolsTerminalOffset; ++symbol) {\r\n        let gotoSet = goTo(_collection[i], symbol);\r\n        for (let k = 0; k < _collection.length; ++k) {\r\n          if (setsEqual(_collection[k], gotoSet)) {\r\n            _parseTable[i][symbol] = k;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Public API for parsing\r\n\r\n  this.createParser = grammarStr => {\r\n    _symbols = [];\r\n    let lines = grammarStr.trim().split(/[\\r\\n]+/);\r\n    let rulesSymbols = [];\r\n    for (let i = 0; i < lines.length; ++i) {\r\n      rulesSymbols[i] = lines[i].trim().split(/\\s+/);\r\n      if (!_symbols.includes(rulesSymbols[i][0])) {\r\n        _symbols.push(rulesSymbols[i][0]);\r\n      }\r\n    }\r\n    _symbolsTerminalOffset = _symbols.length;\r\n    for (let i = 0; i < rulesSymbols.length; ++i) {\r\n      for (let j = 0; j < rulesSymbols[i].length; ++j) {\r\n        if (!_symbols.includes(rulesSymbols[i][j])) {\r\n          _symbols.push(rulesSymbols[i][j]);\r\n        }\r\n      }\r\n    }\r\n    _endMarker = _symbols.length;\r\n    _symbols.push('$');\r\n    _rules = [];\r\n    for (let i = 0; i < rulesSymbols.length; ++i) {\r\n      _rules[i] = {\r\n        index: i,\r\n        rhs: []\r\n      };\r\n      for (let j = 0; j < rulesSymbols[i].length; ++j) {\r\n        if (j === 0) {\r\n          _rules[i].lhs = _symbols.indexOf(rulesSymbols[i][j]);\r\n        } else {\r\n          _rules[i].rhs.push(_symbols.indexOf(rulesSymbols[i][j]));\r\n        }\r\n      }\r\n    }\r\n    createCollection();\r\n    createParseTable();\r\n  };\r\n\r\n  this.parse = inputStr => {\r\n    if (_parseTable === undefined) {\r\n      return;\r\n    }\r\n    _parseSteps = [];\r\n    if (_parseTableHasConflict) {\r\n      _parseSteps.push({\r\n        stateStack: [],\r\n        symbolStack: [],\r\n        input: [],\r\n        action: {\r\n          type: 'error',\r\n          error: 'conflict in parse table'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    let input = scan(inputStr);\r\n    if (input === false) {\r\n      _parseSteps.push({\r\n        stateStack: [],\r\n        symbolStack: [],\r\n        input: [],\r\n        action: {\r\n          type: 'error',\r\n          error: 'syntax error'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    let stateStack = [0];\r\n    let symbolStack = [];\r\n    while (true) {\r\n      let action = _parseTable[top(stateStack)][input[0]];\r\n      if (action === undefined) {\r\n        action = {\r\n          type: 'error',\r\n          error: 'parse error'\r\n        };\r\n      }\r\n\r\n      _parseSteps.push({\r\n        stateStack: stateStack.slice(0),\r\n        symbolStack: symbolStack.slice(0),\r\n        input: input.slice(0),\r\n        action: action\r\n      });\r\n      switch (action.type) {\r\n        case 'shift':\r\n          symbolStack.push(input.shift());\r\n          stateStack.push(action.state);\r\n          break;\r\n        case 'reduce':\r\n          for (let i = 0; i < action.rule.rhs.length; ++i) {\r\n            symbolStack.pop();\r\n            stateStack.pop();\r\n          }\r\n          symbolStack.push(action.rule.lhs);\r\n          stateStack.push(_parseTable[top(stateStack)][action.rule.lhs]);\r\n          break;\r\n        case 'accept':\r\n        case 'error':\r\n          return;\r\n      }\r\n    }\r\n  };\r\n\r\n  this.clear = () => {\r\n    _symbols =\r\n      _symbolsTerminalOffset =\r\n      _endMarker =\r\n      _rules =\r\n      _collection =\r\n      _parseTable =\r\n      _parseTableHasConflict =\r\n      _parseSteps =\r\n      undefined;\r\n  };\r\n\r\n  // Private functions for rendering\r\n\r\n  const actionStr = action => {\r\n    switch (action.type) {\r\n      case 'accept':\r\n        return 'acc';\r\n      case 'shift':\r\n        return 's' + action.state;\r\n      case 'reduce':\r\n        return 'r' + action.rule.index;\r\n      case 'error':\r\n        return 'error: ' + action.error;\r\n      case 'conflict':\r\n        let str = actionStr(action.actions[0]);\r\n        for (let state = 1; state < action.actions.length; ++state) {\r\n          str += ',' + actionStr(action.actions[state]);\r\n        }\r\n        return str;\r\n    }\r\n  };\r\n\r\n  const symbolClass = symbol => {\r\n    if (symbol === _startSymbol) {\r\n      return 'start-symbol';\r\n    }\r\n    if (symbol === _endMarker) {\r\n      return 'end-marker';\r\n    }\r\n    if (isNonTerminal(symbol)) {\r\n      return 'non-terminal';\r\n    }\r\n    if (isTerminal(symbol)) {\r\n      return 'terminal';\r\n    }\r\n  };\r\n\r\n  const arrowNode = () => (\r\n    document.createTextNode(' \\u2192 ')\r\n  );\r\n\r\n  const bulletNode = () => (\r\n    document.createTextNode('\\u2022')\r\n  );\r\n\r\n  const element = (tag, content, classes, attrs) => {\r\n    let node = document.createElement(tag);\r\n    let contentItems;\r\n    if (content === undefined) {\r\n      contentItems = [];\r\n    } else if (Array.isArray(content)) {\r\n      contentItems = content;\r\n    } else {\r\n      contentItems = [content];\r\n    }\r\n    contentItems.forEach(contentItem => {\r\n      if (typeof contentItem === 'object') {\r\n        node.appendChild(contentItem);\r\n      } else {\r\n        node.appendChild(document.createTextNode(contentItem));\r\n      }\r\n    });\r\n    if (classes !== undefined) {\r\n      if (Array.isArray(classes)) {\r\n        node.classList.add(...classes);\r\n      } else {\r\n        node.classList.add(classes);\r\n      }\r\n    }\r\n    if (attrs !== undefined) {\r\n      Object.keys(attrs).forEach(key => {\r\n        node[key] = attrs[key];\r\n      });\r\n    }\r\n    return node;\r\n  };\r\n\r\n  const symbolNode = (symbol, additionalClass) => {\r\n    let classes = [symbolClass(symbol)];\r\n    if (additionalClass !== undefined) {\r\n      classes.push(additionalClass);\r\n    }\r\n    return element('b', _symbols[symbol], classes);\r\n  };\r\n\r\n  const symbolsNodes = symbols => (\r\n    symbols.map(symbol => (\r\n      symbolNode(symbol)\r\n    ))\r\n  );\r\n\r\n  const ruleNodes = rule => [\r\n    symbolNode(rule.lhs),\r\n    arrowNode(),\r\n    ...symbolsNodes(rule.rhs)\r\n  ];\r\n\r\n  const itemNodes = item => {\r\n    let nodes = [\r\n      symbolNode(item.rule.lhs),\r\n      arrowNode()\r\n    ];\r\n    item.rule.rhs.forEach((rhsSymbol, i) => {\r\n      if (item.position === i) {\r\n        nodes.push(bulletNode());\r\n      }\r\n      nodes.push(symbolNode(rhsSymbol));\r\n    });\r\n    if (item.position === item.rule.rhs.length) {\r\n      nodes.push(bulletNode());\r\n    }\r\n    nodes.push(document.createTextNode(','));\r\n    nodes.push(symbolNode(item.lookahead, 'lookahead'));\r\n    return nodes;\r\n  };\r\n\r\n  const treeNode = tree => {\r\n    if (tree === undefined) {\r\n      return undefined;\r\n    }\r\n    let ulNode = document.createElement('ul');\r\n    let liNode = document.createElement('li');\r\n    liNode.classList.add(symbolClass(tree.symbol));\r\n    ulNode.appendChild(liNode);\r\n    let spanNode = document.createElement('span');\r\n    spanNode.appendChild(document.createTextNode(_symbols[tree.symbol]));\r\n    liNode.appendChild(spanNode);\r\n    tree.children.forEach(child => {\r\n      let node = treeNode(child);\r\n      if (node !== undefined) {\r\n        ulNode.appendChild(node);\r\n      }\r\n    });\r\n    return ulNode;\r\n  };\r\n\r\n  // Public API for rendering\r\n\r\n  this.renderGrammar = container => {\r\n    container.innerHTML = '';\r\n    if (_symbols === undefined) {\r\n      return;\r\n    }\r\n    let preNode = document.createElement('pre');\r\n    _rules.forEach((rule, i) => {\r\n      preNode.appendChild(element('i', i + ' '));\r\n      ruleNodes(rule).forEach(ruleNode => {\r\n        preNode.appendChild(ruleNode);\r\n      });\r\n      if (i !== _rules.length - 1) {\r\n        preNode.appendChild(document.createElement('br'));\r\n      }\r\n    });\r\n    container.appendChild(preNode);\r\n  };\r\n\r\n  this.renderCollection = container => {\r\n    container.innerHTML = '';\r\n    if (_collection === undefined) {\r\n      return;\r\n    }\r\n    let preNode = document.createElement('pre');\r\n    _collection.forEach((set, setIndex) => {\r\n      set.forEach((item, itemIndex) => {\r\n        preNode.appendChild(element('i',\r\n          itemIndex === 0 ?\r\n            ['I', element('sub', setIndex), ' '] :\r\n            undefined\r\n        ));\r\n        itemNodes(item).forEach(itemNode => {\r\n          preNode.appendChild(itemNode);\r\n        });\r\n        if (itemIndex !== set.length - 1) {\r\n          preNode.appendChild(document.createElement('br'));\r\n        }\r\n      });\r\n      if (setIndex !== _collection.length - 1) {\r\n        preNode.appendChild(document.createElement('br'));\r\n        preNode.appendChild(document.createElement('br'));\r\n      }\r\n    });\r\n    container.appendChild(preNode);\r\n  };\r\n\r\n  this.renderParseTable = container => {\r\n    container.innerHTML = '';\r\n    if (_parseTable === undefined) {\r\n      return;\r\n    }\r\n    let tableNode = document.createElement('table');\r\n    let theadNode = document.createElement('thead');\r\n    tableNode.appendChild(theadNode);\r\n    let theadTr1Node = document.createElement('tr');\r\n    theadNode.appendChild(theadTr1Node);\r\n    let theadTr2Node = document.createElement('tr');\r\n    theadNode.appendChild(theadTr2Node);\r\n    let tbodyNode = document.createElement('tbody');\r\n    tableNode.appendChild(tbodyNode);\r\n    theadTr1Node.appendChild(element('th', 'state', undefined, { rowSpan: 2 }));\r\n    theadTr1Node.appendChild(element('th', 'action', undefined, { colSpan: _symbols.length - _symbolsTerminalOffset }));\r\n    theadTr1Node.appendChild(element('th', 'goto', undefined, { colSpan: _symbolsTerminalOffset - 1 }));\r\n    for (let s = _symbolsTerminalOffset; s < _symbols.length; ++s) {\r\n      let classes = ['action'];\r\n      if (s === _endMarker) {\r\n        classes.push('end-marker');\r\n      }\r\n      theadTr2Node.appendChild(element('th', _symbols[s], classes));\r\n    }\r\n    for (let s = 1; s < _symbolsTerminalOffset; ++s) {\r\n      theadTr2Node.appendChild(element('th', _symbols[s], 'goto'));\r\n    }\r\n    for (let i = 0; i < _parseTable.length; ++i) {\r\n      let trNode = document.createElement('tr');\r\n      tbodyNode.appendChild(trNode);\r\n      trNode.appendChild(element('td', i));\r\n      for (let s = _symbolsTerminalOffset; s < _symbols.length; ++s) {\r\n        if (_parseTable[i][s] === undefined) {\r\n          trNode.appendChild(element('td', undefined, 'error'));\r\n        } else {\r\n          trNode.appendChild(element('td', actionStr(_parseTable[i][s]), _parseTable[i][s].type));\r\n        }\r\n      }\r\n      for (let s = 1; s < _symbolsTerminalOffset; ++s) {\r\n        trNode.appendChild(element('td', _parseTable[i][s]));\r\n      }\r\n    }\r\n    container.appendChild(tableNode);\r\n  };\r\n\r\n  this.renderParseSteps = container => {\r\n    container.innerHTML = '';\r\n    if (_parseSteps === undefined) {\r\n      return;\r\n    }\r\n    let tableNode = document.createElement('table');\r\n    let theadNode = document.createElement('thead');\r\n    tableNode.appendChild(theadNode);\r\n    let theadTrNode = document.createElement('tr');\r\n    theadNode.appendChild(theadTrNode);\r\n    let tbodyNode = document.createElement('tbody');\r\n    tableNode.appendChild(tbodyNode);\r\n    theadTrNode.appendChild(element('th', 'state stack'));\r\n    theadTrNode.appendChild(element('th', 'symbol stack'));\r\n    theadTrNode.appendChild(element('th', 'input'));\r\n    theadTrNode.appendChild(element('th', 'action'));\r\n    theadTrNode.appendChild(element('th', 'output'));\r\n    _parseSteps.forEach(step => {\r\n      let trNode = document.createElement('tr');\r\n      tbodyNode.appendChild(trNode);\r\n      trNode.appendChild(element('td', document.createTextNode(step.stateStack.join(' '))));\r\n      trNode.appendChild(element('td', symbolsNodes(step.symbolStack)));\r\n      trNode.appendChild(element('td', symbolsNodes(step.input)));\r\n      trNode.appendChild(element('td', actionStr(step.action), step.action.type));\r\n      trNode.appendChild(element('td',\r\n        step.action.type === 'reduce' ?\r\n          ruleNodes(step.action.rule) :\r\n          undefined\r\n      ));\r\n    });\r\n    container.appendChild(tableNode);\r\n  };\r\n\r\n  this.renderParseTree = container => {\r\n    container.innerHTML = '';\r\n    if (_parseSteps === undefined) {\r\n      return;\r\n    }\r\n    let ulNode = treeNode(getParseTree());\r\n    if (ulNode !== undefined) {\r\n      container.appendChild(ulNode);\r\n    }\r\n  };\r\n\r\n  // Public API for samples\r\n\r\n  this.sampleGrammar = () => (\r\n    \"S' G\\n\" +\r\n    'G E = E\\n' +\r\n    'G id\\n' +\r\n    'E E + T\\n' +\r\n    'E T\\n' +\r\n    'T T * id\\n' +\r\n    'T id'\r\n  );\r\n\r\n  this.sampleInput = () => (\r\n    'id = id + id * id'\r\n  );\r\n\r\n};\r\n"],"names":["$6aa6a539d62107d1$export$2e2bcd8739ae039","document","_symbols","_symbolsTerminalOffset","_endMarker","_rules","_collection","_parseTable","_parseTableHasConflict","_parseSteps","top","stack","length","itemsEqual","i1","i2","rule","position","lookahead","setsEqual","s1","s2","v","state","j","includes","push","actionsEqual","a1","a2","type","isNonTerminal","symbol","isTerminal","isTerminalOrEndMarker","first","f","i","lhs","rhs","fn","closure","set","closureSet","slice","newItemAdded","k","item","newItem","m","goTo","gotoSet","scan","input","s","trim","split","r","t","indexOf","addRuleToParseTree","tree","children","getParseTree","action","undefined","createCollection","newSetAdded","newSet","addActionToParseTable","newAction","actions","createParseTable","Array","createParser","grammarStr","lines","rulesSymbols","index","parse","inputStr","stateStack","symbolStack","error","shift","pop","clear","actionStr","str","symbolClass","arrowNode","createTextNode","bulletNode","element","tag","content","classes","attrs","node","createElement","contentItems","isArray","forEach","contentItem","appendChild","classList","add","Object","keys","key","symbolNode","additionalClass","symbolsNodes","symbols","map","ruleNodes","itemNodes","nodes","rhsSymbol","treeNode","ulNode","liNode","spanNode","child","renderGrammar","container","innerHTML","preNode","ruleNode","renderCollection","setIndex","itemIndex","itemNode","renderParseTable","tableNode","theadNode","theadTr1Node","theadTr2Node","tbodyNode","rowSpan","colSpan","trNode","renderParseSteps","theadTrNode","step","join","renderParseTree","sampleGrammar","sampleInput","addEventListener","lr1ParserVis","grammarText","getElementById","inputText","containers","grammar","collection","parseTable","parseSteps","parseTree","emptyContainers","value"],"version":3,"file":"index.13ab860d.js.map"}